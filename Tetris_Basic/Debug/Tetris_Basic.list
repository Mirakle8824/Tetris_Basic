
Tetris_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a08  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad8  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800868c  0800868c  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008694  08008694  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800869c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a8  20000214  080088b0  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012bc  080088b0  000212bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fda  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000321b  00000000  00000000  0003721e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  0003a440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e0  00000000  00000000  0003b998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002668b  00000000  00000000  0003cd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011844  00000000  00000000  00063403  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df3cb  00000000  00000000  00074c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154012  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  00154090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000214 	.word	0x20000214
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006b9c 	.word	0x08006b9c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000218 	.word	0x20000218
 80001e8:	08006b9c 	.word	0x08006b9c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f94d 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 f808 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f005 ff42 	bl	80063a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f965 	bl	800081e <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f92d 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000210 	.word	0x20000210
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000fec 	.word	0x20000fec

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000fec 	.word	0x20000fec

080005d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d8:	f7ff ffee 	bl	80005b8 <HAL_GetTick>
 80005dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d005      	beq.n	80005f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_Delay+0x40>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f6:	bf00      	nop
 80005f8:	f7ff ffde 	bl	80005b8 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	429a      	cmp	r2, r3
 8000606:	d8f7      	bhi.n	80005f8 <HAL_Delay+0x28>
  {
  }
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000004 	.word	0x20000004

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db0b      	blt.n	80006a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 021f 	and.w	r2, r3, #31
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <__NVIC_EnableIRQ+0x38>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	095b      	lsrs	r3, r3, #5
 8000698:	2001      	movs	r0, #1
 800069a:	fa00 f202 	lsl.w	r2, r0, r2
 800069e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db0a      	blt.n	80006de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	490c      	ldr	r1, [pc, #48]	; (8000700 <__NVIC_SetPriority+0x4c>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	0112      	lsls	r2, r2, #4
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	440b      	add	r3, r1
 80006d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006dc:	e00a      	b.n	80006f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4908      	ldr	r1, [pc, #32]	; (8000704 <__NVIC_SetPriority+0x50>)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 030f 	and.w	r3, r3, #15
 80006ea:	3b04      	subs	r3, #4
 80006ec:	0112      	lsls	r2, r2, #4
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	440b      	add	r3, r1
 80006f2:	761a      	strb	r2, [r3, #24]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000e100 	.word	0xe000e100
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	f1c3 0307 	rsb	r3, r3, #7
 8000722:	2b04      	cmp	r3, #4
 8000724:	bf28      	it	cs
 8000726:	2304      	movcs	r3, #4
 8000728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3304      	adds	r3, #4
 800072e:	2b06      	cmp	r3, #6
 8000730:	d902      	bls.n	8000738 <NVIC_EncodePriority+0x30>
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3b03      	subs	r3, #3
 8000736:	e000      	b.n	800073a <NVIC_EncodePriority+0x32>
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	f04f 32ff 	mov.w	r2, #4294967295
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	43da      	mvns	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	401a      	ands	r2, r3
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000750:	f04f 31ff 	mov.w	r1, #4294967295
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43d9      	mvns	r1, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	4313      	orrs	r3, r2
         );
}
 8000762:	4618      	mov	r0, r3
 8000764:	3724      	adds	r7, #36	; 0x24
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f7ff ff8e 	bl	80006b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff29 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff3e 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff8e 	bl	8000708 <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5d 	bl	80006b4 <__NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff31 	bl	8000678 <__NVIC_EnableIRQ>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffa2 	bl	8000770 <SysTick_Config>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000844:	f7ff feb8 	bl	80005b8 <HAL_GetTick>
 8000848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	e099      	b.n	8000988 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2202      	movs	r2, #2
 8000860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f022 0201 	bic.w	r2, r2, #1
 8000872:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000874:	e00f      	b.n	8000896 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000876:	f7ff fe9f 	bl	80005b8 <HAL_GetTick>
 800087a:	4602      	mov	r2, r0
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	2b05      	cmp	r3, #5
 8000882:	d908      	bls.n	8000896 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2220      	movs	r2, #32
 8000888:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2203      	movs	r2, #3
 800088e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000892:	2303      	movs	r3, #3
 8000894:	e078      	b.n	8000988 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1e8      	bne.n	8000876 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	4b38      	ldr	r3, [pc, #224]	; (8000990 <HAL_DMA_Init+0x158>)
 80008b0:	4013      	ands	r3, r2
 80008b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6a1b      	ldr	r3, [r3, #32]
 80008e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d107      	bne.n	8000900 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	4313      	orrs	r3, r2
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	f023 0307 	bic.w	r3, r3, #7
 8000916:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	4313      	orrs	r3, r2
 8000920:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	2b04      	cmp	r3, #4
 8000928:	d117      	bne.n	800095a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4313      	orrs	r3, r2
 8000932:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00e      	beq.n	800095a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f8df 	bl	8000b00 <DMA_CheckFifoParam>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d008      	beq.n	800095a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2240      	movs	r2, #64	; 0x40
 800094c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2201      	movs	r2, #1
 8000952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000956:	2301      	movs	r3, #1
 8000958:	e016      	b.n	8000988 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	697a      	ldr	r2, [r7, #20]
 8000960:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f896 	bl	8000a94 <DMA_CalcBaseAndBitshift>
 8000968:	4603      	mov	r3, r0
 800096a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000970:	223f      	movs	r2, #63	; 0x3f
 8000972:	409a      	lsls	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	f010803f 	.word	0xf010803f

08000994 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d101      	bne.n	80009a6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e050      	b.n	8000a48 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d101      	bne.n	80009b6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80009b2:	2302      	movs	r3, #2
 80009b4:	e048      	b.n	8000a48 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f022 0201 	bic.w	r2, r2, #1
 80009c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2221      	movs	r2, #33	; 0x21
 80009f4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 f84c 	bl	8000a94 <DMA_CalcBaseAndBitshift>
 80009fc:	4603      	mov	r3, r0
 80009fe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a28:	223f      	movs	r2, #63	; 0x3f
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d004      	beq.n	8000a6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00c      	b.n	8000a88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2205      	movs	r2, #5
 8000a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f022 0201 	bic.w	r2, r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	3b10      	subs	r3, #16
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <DMA_CalcBaseAndBitshift+0x64>)
 8000aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aaa:	091b      	lsrs	r3, r3, #4
 8000aac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000aae:	4a13      	ldr	r2, [pc, #76]	; (8000afc <DMA_CalcBaseAndBitshift+0x68>)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d909      	bls.n	8000ad6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000aca:	f023 0303 	bic.w	r3, r3, #3
 8000ace:	1d1a      	adds	r2, r3, #4
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	659a      	str	r2, [r3, #88]	; 0x58
 8000ad4:	e007      	b.n	8000ae6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ade:	f023 0303 	bic.w	r3, r3, #3
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	aaaaaaab 	.word	0xaaaaaaab
 8000afc:	08006bb4 	.word	0x08006bb4

08000b00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d11f      	bne.n	8000b5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d855      	bhi.n	8000bcc <DMA_CheckFifoParam+0xcc>
 8000b20:	a201      	add	r2, pc, #4	; (adr r2, 8000b28 <DMA_CheckFifoParam+0x28>)
 8000b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b26:	bf00      	nop
 8000b28:	08000b39 	.word	0x08000b39
 8000b2c:	08000b4b 	.word	0x08000b4b
 8000b30:	08000b39 	.word	0x08000b39
 8000b34:	08000bcd 	.word	0x08000bcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d045      	beq.n	8000bd0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b48:	e042      	b.n	8000bd0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000b52:	d13f      	bne.n	8000bd4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b58:	e03c      	b.n	8000bd4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b62:	d121      	bne.n	8000ba8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d836      	bhi.n	8000bd8 <DMA_CheckFifoParam+0xd8>
 8000b6a:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <DMA_CheckFifoParam+0x70>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000b81 	.word	0x08000b81
 8000b74:	08000b87 	.word	0x08000b87
 8000b78:	08000b81 	.word	0x08000b81
 8000b7c:	08000b99 	.word	0x08000b99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
      break;
 8000b84:	e02f      	b.n	8000be6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d024      	beq.n	8000bdc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000b96:	e021      	b.n	8000bdc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ba0:	d11e      	bne.n	8000be0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000ba6:	e01b      	b.n	8000be0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d902      	bls.n	8000bb4 <DMA_CheckFifoParam+0xb4>
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d003      	beq.n	8000bba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000bb2:	e018      	b.n	8000be6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8000bb8:	e015      	b.n	8000be6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00e      	beq.n	8000be4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8000bca:	e00b      	b.n	8000be4 <DMA_CheckFifoParam+0xe4>
      break;
 8000bcc:	bf00      	nop
 8000bce:	e00a      	b.n	8000be6 <DMA_CheckFifoParam+0xe6>
      break;
 8000bd0:	bf00      	nop
 8000bd2:	e008      	b.n	8000be6 <DMA_CheckFifoParam+0xe6>
      break;
 8000bd4:	bf00      	nop
 8000bd6:	e006      	b.n	8000be6 <DMA_CheckFifoParam+0xe6>
      break;
 8000bd8:	bf00      	nop
 8000bda:	e004      	b.n	8000be6 <DMA_CheckFifoParam+0xe6>
      break;
 8000bdc:	bf00      	nop
 8000bde:	e002      	b.n	8000be6 <DMA_CheckFifoParam+0xe6>
      break;   
 8000be0:	bf00      	nop
 8000be2:	e000      	b.n	8000be6 <DMA_CheckFifoParam+0xe6>
      break;
 8000be4:	bf00      	nop
    }
  } 
  
  return status; 
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e03b      	b.n	8000c7e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d106      	bne.n	8000c20 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f005 fbec 	bl	80063f8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2202      	movs	r2, #2
 8000c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c44:	f023 0107 	bic.w	r1, r3, #7
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	430a      	orrs	r2, r1
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68d1      	ldr	r1, [r2, #12]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af02      	add	r7, sp, #8
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d101      	bne.n	8000ca2 <HAL_DMA2D_Start+0x1c>
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e018      	b.n	8000cd4 <HAL_DMA2D_Start+0x4e>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2202      	movs	r2, #2
 8000cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	68b9      	ldr	r1, [r7, #8]
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f000 f989 	bl	8000fd4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f042 0201 	orr.w	r2, r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d056      	beq.n	8000da6 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8000cf8:	f7ff fc5e 	bl	80005b8 <HAL_GetTick>
 8000cfc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8000cfe:	e04b      	b.n	8000d98 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d023      	beq.n	8000d5a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f003 0320 	and.w	r3, r3, #32
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d005      	beq.n	8000d28 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d20:	f043 0202 	orr.w	r2, r3, #2
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d36:	f043 0201 	orr.w	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2221      	movs	r2, #33	; 0x21
 8000d44:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2204      	movs	r2, #4
 8000d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e0a5      	b.n	8000ea6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d60:	d01a      	beq.n	8000d98 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8000d62:	f7ff fc29 	bl	80005b8 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d302      	bcc.n	8000d78 <HAL_DMA2D_PollForTransfer+0x9c>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10f      	bne.n	8000d98 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7c:	f043 0220 	orr.w	r2, r3, #32
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2203      	movs	r2, #3
 8000d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e086      	b.n	8000ea6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0ac      	beq.n	8000d00 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	f003 0320 	and.w	r3, r3, #32
 8000db0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	f003 0320 	and.w	r3, r3, #32
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d061      	beq.n	8000e8c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000dc8:	f7ff fbf6 	bl	80005b8 <HAL_GetTick>
 8000dcc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8000dce:	e056      	b.n	8000e7e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d02e      	beq.n	8000e40 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d005      	beq.n	8000df8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df0:	f043 0204 	orr.w	r2, r3, #4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0320 	and.w	r3, r3, #32
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e06:	f043 0202 	orr.w	r2, r3, #2
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1c:	f043 0201 	orr.w	r2, r3, #1
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2229      	movs	r2, #41	; 0x29
 8000e2a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2204      	movs	r2, #4
 8000e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e032      	b.n	8000ea6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e46:	d01a      	beq.n	8000e7e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8000e48:	f7ff fbb6 	bl	80005b8 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d302      	bcc.n	8000e5e <HAL_DMA2D_PollForTransfer+0x182>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10f      	bne.n	8000e7e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e62:	f043 0220 	orr.w	r2, r3, #32
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e013      	b.n	8000ea6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0310 	and.w	r3, r3, #16
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0a1      	beq.n	8000dd0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2212      	movs	r2, #18
 8000e92:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2201      	movs	r2, #1
 8000e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <HAL_DMA2D_ConfigLayer+0x20>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e079      	b.n	8000fc4 <HAL_DMA2D_ConfigLayer+0x114>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2202      	movs	r2, #2
 8000edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	3318      	adds	r3, #24
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	041b      	lsls	r3, r3, #16
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8000efa:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <HAL_DMA2D_ConfigLayer+0x120>)
 8000efc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b0a      	cmp	r3, #10
 8000f04:	d003      	beq.n	8000f0e <HAL_DMA2D_ConfigLayer+0x5e>
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b09      	cmp	r3, #9
 8000f0c:	d107      	bne.n	8000f1e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e005      	b.n	8000f2a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	061b      	lsls	r3, r3, #24
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d120      	bne.n	8000f72 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	ea02 0103 	and.w	r1, r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b0a      	cmp	r3, #10
 8000f58:	d003      	beq.n	8000f62 <HAL_DMA2D_ConfigLayer+0xb2>
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b09      	cmp	r3, #9
 8000f60:	d127      	bne.n	8000fb2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8000f70:	e01f      	b.n	8000fb2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	69da      	ldr	r2, [r3, #28]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	ea02 0103 	and.w	r1, r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b0a      	cmp	r3, #10
 8000f9a:	d003      	beq.n	8000fa4 <HAL_DMA2D_ConfigLayer+0xf4>
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	d106      	bne.n	8000fb2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000fb0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	ff03000f 	.word	0xff03000f

08000fd4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b08b      	sub	sp, #44	; 0x2c
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	041a      	lsls	r2, r3, #16
 8000ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800100c:	d174      	bne.n	80010f8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001014:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800101c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001024:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d108      	bne.n	8001046 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	431a      	orrs	r2, r3
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	4313      	orrs	r3, r2
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4313      	orrs	r3, r2
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
 8001044:	e053      	b.n	80010ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d106      	bne.n	800105c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	4313      	orrs	r3, r2
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4313      	orrs	r3, r2
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
 800105a:	e048      	b.n	80010ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d111      	bne.n	8001088 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	0cdb      	lsrs	r3, r3, #19
 8001068:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	0a9b      	lsrs	r3, r3, #10
 800106e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	015a      	lsls	r2, r3, #5
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	02db      	lsls	r3, r3, #11
 800107e:	4313      	orrs	r3, r2
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	4313      	orrs	r3, r2
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
 8001086:	e032      	b.n	80010ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d117      	bne.n	80010c0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	0fdb      	lsrs	r3, r3, #31
 8001094:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	0cdb      	lsrs	r3, r3, #19
 800109a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	0adb      	lsrs	r3, r3, #11
 80010a0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	015a      	lsls	r2, r3, #5
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	029b      	lsls	r3, r3, #10
 80010b0:	431a      	orrs	r2, r3
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	03db      	lsls	r3, r3, #15
 80010b6:	4313      	orrs	r3, r2
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
 80010be:	e016      	b.n	80010ee <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	0f1b      	lsrs	r3, r3, #28
 80010c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	0d1b      	lsrs	r3, r3, #20
 80010ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	0b1b      	lsrs	r3, r3, #12
 80010d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	011a      	lsls	r2, r3, #4
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	431a      	orrs	r2, r3
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	031b      	lsls	r3, r3, #12
 80010e6:	4313      	orrs	r3, r2
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80010f6:	e003      	b.n	8001100 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	60da      	str	r2, [r3, #12]
}
 8001100:	bf00      	nop
 8001102:	372c      	adds	r7, #44	; 0x2c
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e177      	b.n	8001418 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 8166 	bne.w	8001412 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x4a>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b12      	cmp	r3, #18
 8001154:	d123      	bne.n	800119e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	691a      	ldr	r2, [r3, #16]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	69b9      	ldr	r1, [r7, #24]
 800119a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0203 	and.w	r2, r3, #3
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d00b      	beq.n	80011f2 <HAL_GPIO_Init+0xe6>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e6:	2b11      	cmp	r3, #17
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80c0 	beq.w	8001412 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b65      	ldr	r3, [pc, #404]	; (800142c <HAL_GPIO_Init+0x320>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a64      	ldr	r2, [pc, #400]	; (800142c <HAL_GPIO_Init+0x320>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b62      	ldr	r3, [pc, #392]	; (800142c <HAL_GPIO_Init+0x320>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ae:	4a60      	ldr	r2, [pc, #384]	; (8001430 <HAL_GPIO_Init+0x324>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a57      	ldr	r2, [pc, #348]	; (8001434 <HAL_GPIO_Init+0x328>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d037      	beq.n	800134a <HAL_GPIO_Init+0x23e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a56      	ldr	r2, [pc, #344]	; (8001438 <HAL_GPIO_Init+0x32c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d031      	beq.n	8001346 <HAL_GPIO_Init+0x23a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a55      	ldr	r2, [pc, #340]	; (800143c <HAL_GPIO_Init+0x330>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d02b      	beq.n	8001342 <HAL_GPIO_Init+0x236>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a54      	ldr	r2, [pc, #336]	; (8001440 <HAL_GPIO_Init+0x334>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d025      	beq.n	800133e <HAL_GPIO_Init+0x232>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a53      	ldr	r2, [pc, #332]	; (8001444 <HAL_GPIO_Init+0x338>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01f      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a52      	ldr	r2, [pc, #328]	; (8001448 <HAL_GPIO_Init+0x33c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x22a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a51      	ldr	r2, [pc, #324]	; (800144c <HAL_GPIO_Init+0x340>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x226>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a50      	ldr	r2, [pc, #320]	; (8001450 <HAL_GPIO_Init+0x344>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x222>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <HAL_GPIO_Init+0x348>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x21e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4e      	ldr	r2, [pc, #312]	; (8001458 <HAL_GPIO_Init+0x34c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x21a>
 8001322:	2309      	movs	r3, #9
 8001324:	e012      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001326:	230a      	movs	r3, #10
 8001328:	e010      	b.n	800134c <HAL_GPIO_Init+0x240>
 800132a:	2308      	movs	r3, #8
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x240>
 800132e:	2307      	movs	r3, #7
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x240>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x240>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x240>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4934      	ldr	r1, [pc, #208]	; (8001430 <HAL_GPIO_Init+0x324>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800136a:	4b3c      	ldr	r3, [pc, #240]	; (800145c <HAL_GPIO_Init+0x350>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800138e:	4a33      	ldr	r2, [pc, #204]	; (800145c <HAL_GPIO_Init+0x350>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <HAL_GPIO_Init+0x350>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b8:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_GPIO_Init+0x350>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_GPIO_Init+0x350>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e2:	4a1e      	ldr	r2, [pc, #120]	; (800145c <HAL_GPIO_Init+0x350>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_GPIO_Init+0x350>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800140c:	4a13      	ldr	r2, [pc, #76]	; (800145c <HAL_GPIO_Init+0x350>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae84 	bls.w	8001128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	3724      	adds	r7, #36	; 0x24
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40023800 	.word	0x40023800
 8001430:	40013800 	.word	0x40013800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40021400 	.word	0x40021400
 800144c:	40021800 	.word	0x40021800
 8001450:	40021c00 	.word	0x40021c00
 8001454:	40022000 	.word	0x40022000
 8001458:	40022400 	.word	0x40022400
 800145c:	40013c00 	.word	0x40013c00

08001460 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e0d9      	b.n	8001630 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800147c:	2201      	movs	r2, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	429a      	cmp	r2, r3
 8001494:	f040 80c9 	bne.w	800162a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001498:	4a6a      	ldr	r2, [pc, #424]	; (8001644 <HAL_GPIO_DeInit+0x1e4>)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	4013      	ands	r3, r2
 80014b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a62      	ldr	r2, [pc, #392]	; (8001648 <HAL_GPIO_DeInit+0x1e8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d037      	beq.n	8001532 <HAL_GPIO_DeInit+0xd2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a61      	ldr	r2, [pc, #388]	; (800164c <HAL_GPIO_DeInit+0x1ec>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d031      	beq.n	800152e <HAL_GPIO_DeInit+0xce>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a60      	ldr	r2, [pc, #384]	; (8001650 <HAL_GPIO_DeInit+0x1f0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d02b      	beq.n	800152a <HAL_GPIO_DeInit+0xca>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a5f      	ldr	r2, [pc, #380]	; (8001654 <HAL_GPIO_DeInit+0x1f4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d025      	beq.n	8001526 <HAL_GPIO_DeInit+0xc6>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a5e      	ldr	r2, [pc, #376]	; (8001658 <HAL_GPIO_DeInit+0x1f8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d01f      	beq.n	8001522 <HAL_GPIO_DeInit+0xc2>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a5d      	ldr	r2, [pc, #372]	; (800165c <HAL_GPIO_DeInit+0x1fc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d019      	beq.n	800151e <HAL_GPIO_DeInit+0xbe>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a5c      	ldr	r2, [pc, #368]	; (8001660 <HAL_GPIO_DeInit+0x200>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_GPIO_DeInit+0xba>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a5b      	ldr	r2, [pc, #364]	; (8001664 <HAL_GPIO_DeInit+0x204>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00d      	beq.n	8001516 <HAL_GPIO_DeInit+0xb6>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a5a      	ldr	r2, [pc, #360]	; (8001668 <HAL_GPIO_DeInit+0x208>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d007      	beq.n	8001512 <HAL_GPIO_DeInit+0xb2>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a59      	ldr	r2, [pc, #356]	; (800166c <HAL_GPIO_DeInit+0x20c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d101      	bne.n	800150e <HAL_GPIO_DeInit+0xae>
 800150a:	2309      	movs	r3, #9
 800150c:	e012      	b.n	8001534 <HAL_GPIO_DeInit+0xd4>
 800150e:	230a      	movs	r3, #10
 8001510:	e010      	b.n	8001534 <HAL_GPIO_DeInit+0xd4>
 8001512:	2308      	movs	r3, #8
 8001514:	e00e      	b.n	8001534 <HAL_GPIO_DeInit+0xd4>
 8001516:	2307      	movs	r3, #7
 8001518:	e00c      	b.n	8001534 <HAL_GPIO_DeInit+0xd4>
 800151a:	2306      	movs	r3, #6
 800151c:	e00a      	b.n	8001534 <HAL_GPIO_DeInit+0xd4>
 800151e:	2305      	movs	r3, #5
 8001520:	e008      	b.n	8001534 <HAL_GPIO_DeInit+0xd4>
 8001522:	2304      	movs	r3, #4
 8001524:	e006      	b.n	8001534 <HAL_GPIO_DeInit+0xd4>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_DeInit+0xd4>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_DeInit+0xd4>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_DeInit+0xd4>
 8001532:	2300      	movs	r3, #0
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	429a      	cmp	r2, r3
 8001542:	d132      	bne.n	80015aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001554:	4a3b      	ldr	r2, [pc, #236]	; (8001644 <HAL_GPIO_DeInit+0x1e4>)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	43da      	mvns	r2, r3
 8001564:	4837      	ldr	r0, [pc, #220]	; (8001644 <HAL_GPIO_DeInit+0x1e4>)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	400a      	ands	r2, r1
 800156c:	3302      	adds	r3, #2
 800156e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001572:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_GPIO_DeInit+0x210>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	493d      	ldr	r1, [pc, #244]	; (8001670 <HAL_GPIO_DeInit+0x210>)
 800157c:	4013      	ands	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001580:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_GPIO_DeInit+0x210>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43db      	mvns	r3, r3
 8001588:	4939      	ldr	r1, [pc, #228]	; (8001670 <HAL_GPIO_DeInit+0x210>)
 800158a:	4013      	ands	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_GPIO_DeInit+0x210>)
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43db      	mvns	r3, r3
 8001596:	4936      	ldr	r1, [pc, #216]	; (8001670 <HAL_GPIO_DeInit+0x210>)
 8001598:	4013      	ands	r3, r2
 800159a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800159c:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_GPIO_DeInit+0x210>)
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	4932      	ldr	r1, [pc, #200]	; (8001670 <HAL_GPIO_DeInit+0x210>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2103      	movs	r1, #3
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	401a      	ands	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	08d2      	lsrs	r2, r2, #3
 80015e0:	4019      	ands	r1, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2103      	movs	r1, #3
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	2101      	movs	r1, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	401a      	ands	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2103      	movs	r1, #3
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b0f      	cmp	r3, #15
 8001634:	f67f af22 	bls.w	800147c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001638:	bf00      	nop
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40013800 	.word	0x40013800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40021000 	.word	0x40021000
 800165c:	40021400 	.word	0x40021400
 8001660:	40021800 	.word	0x40021800
 8001664:	40021c00 	.word	0x40021c00
 8001668:	40022000 	.word	0x40022000
 800166c:	40022400 	.word	0x40022400
 8001670:	40013c00 	.word	0x40013c00

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e10f      	b.n	80018da <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f004 feb4 	bl	800643c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2224      	movs	r2, #36	; 0x24
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016ec:	f001 f8a8 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 80016f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a7b      	ldr	r2, [pc, #492]	; (80018e4 <HAL_I2C_Init+0x23c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d807      	bhi.n	800170c <HAL_I2C_Init+0x64>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a7a      	ldr	r2, [pc, #488]	; (80018e8 <HAL_I2C_Init+0x240>)
 8001700:	4293      	cmp	r3, r2
 8001702:	bf94      	ite	ls
 8001704:	2301      	movls	r3, #1
 8001706:	2300      	movhi	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	e006      	b.n	800171a <HAL_I2C_Init+0x72>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4a77      	ldr	r2, [pc, #476]	; (80018ec <HAL_I2C_Init+0x244>)
 8001710:	4293      	cmp	r3, r2
 8001712:	bf94      	ite	ls
 8001714:	2301      	movls	r3, #1
 8001716:	2300      	movhi	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0db      	b.n	80018da <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <HAL_I2C_Init+0x248>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a64      	ldr	r2, [pc, #400]	; (80018e4 <HAL_I2C_Init+0x23c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d802      	bhi.n	800175c <HAL_I2C_Init+0xb4>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3301      	adds	r3, #1
 800175a:	e009      	b.n	8001770 <HAL_I2C_Init+0xc8>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	4a63      	ldr	r2, [pc, #396]	; (80018f4 <HAL_I2C_Init+0x24c>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	3301      	adds	r3, #1
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	430b      	orrs	r3, r1
 8001776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4956      	ldr	r1, [pc, #344]	; (80018e4 <HAL_I2C_Init+0x23c>)
 800178c:	428b      	cmp	r3, r1
 800178e:	d80d      	bhi.n	80017ac <HAL_I2C_Init+0x104>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e59      	subs	r1, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fbb1 f3f3 	udiv	r3, r1, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	bf38      	it	cc
 80017a8:	2304      	movcc	r3, #4
 80017aa:	e04f      	b.n	800184c <HAL_I2C_Init+0x1a4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <HAL_I2C_Init+0x130>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1e58      	subs	r0, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	440b      	add	r3, r1
 80017c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	e012      	b.n	80017fe <HAL_I2C_Init+0x156>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1e58      	subs	r0, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	0099      	lsls	r1, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Init+0x15e>
 8001802:	2301      	movs	r3, #1
 8001804:	e022      	b.n	800184c <HAL_I2C_Init+0x1a4>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10e      	bne.n	800182c <HAL_I2C_Init+0x184>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1e58      	subs	r0, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6859      	ldr	r1, [r3, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	440b      	add	r3, r1
 800181c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001820:	3301      	adds	r3, #1
 8001822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182a:	e00f      	b.n	800184c <HAL_I2C_Init+0x1a4>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1e58      	subs	r0, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	0099      	lsls	r1, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001842:	3301      	adds	r3, #1
 8001844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	6809      	ldr	r1, [r1, #0]
 8001850:	4313      	orrs	r3, r2
 8001852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800187a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6911      	ldr	r1, [r2, #16]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68d2      	ldr	r2, [r2, #12]
 8001886:	4311      	orrs	r1, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	430b      	orrs	r3, r1
 800188e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2220      	movs	r2, #32
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	000186a0 	.word	0x000186a0
 80018e8:	001e847f 	.word	0x001e847f
 80018ec:	003d08ff 	.word	0x003d08ff
 80018f0:	431bde83 	.word	0x431bde83
 80018f4:	10624dd3 	.word	0x10624dd3

080018f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b20      	cmp	r3, #32
 800190c:	d129      	bne.n	8001962 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2224      	movs	r2, #36	; 0x24
 8001912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0210 	bic.w	r2, r2, #16
 8001934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0201 	orr.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2220      	movs	r2, #32
 800195a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001962:	2302      	movs	r3, #2
  }
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b20      	cmp	r3, #32
 8001988:	d12a      	bne.n	80019e0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2224      	movs	r2, #36	; 0x24
 800198e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80019aa:	89fb      	ldrh	r3, [r7, #14]
 80019ac:	f023 030f 	bic.w	r3, r3, #15
 80019b0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	89fb      	ldrh	r3, [r7, #14]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	89fa      	ldrh	r2, [r7, #14]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0bf      	b.n	8001b82 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f004 fd7a 	bl	8006510 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001a32:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6999      	ldr	r1, [r3, #24]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001a48:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6899      	ldr	r1, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <HAL_LTDC_Init+0x19c>)
 8001a64:	400b      	ands	r3, r1
 8001a66:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6899      	ldr	r1, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68d9      	ldr	r1, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_LTDC_Init+0x19c>)
 8001a92:	400b      	ands	r3, r1
 8001a94:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68d9      	ldr	r1, [r3, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1a      	ldr	r2, [r3, #32]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6919      	ldr	r1, [r3, #16]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_LTDC_Init+0x19c>)
 8001ac0:	400b      	ands	r3, r1
 8001ac2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	041b      	lsls	r3, r3, #16
 8001aca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6919      	ldr	r1, [r3, #16]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6959      	ldr	r1, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_LTDC_Init+0x19c>)
 8001aee:	400b      	ands	r3, r1
 8001af0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6959      	ldr	r1, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0206 	orr.w	r2, r2, #6
 8001b5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	f000f800 	.word	0xf000f800

08001b90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_LTDC_ConfigLayer+0x1a>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e02c      	b.n	8001c04 <HAL_LTDC_ConfigLayer+0x74>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2134      	movs	r1, #52	; 0x34
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	4614      	mov	r4, r2
 8001bce:	461d      	mov	r5, r3
 8001bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bdc:	682b      	ldr	r3, [r5, #0]
 8001bde:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f83b 	bl	8001c60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bdb0      	pop	{r4, r5, r7, pc}

08001c0c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_LTDC_EnableDither+0x16>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e016      	b.n	8001c50 <HAL_LTDC_EnableDither+0x44>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_LTDC_EnableDither+0x50>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_LTDC_EnableDither+0x50>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40016800 	.word	0x40016800

08001c60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7c:	4413      	add	r3, r2
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	01db      	lsls	r3, r3, #7
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3384      	adds	r3, #132	; 0x84
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	4611      	mov	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	01d2      	lsls	r2, r2, #7
 8001c9c:	440a      	add	r2, r1
 8001c9e:	3284      	adds	r2, #132	; 0x84
 8001ca0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001ca4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb6:	4413      	add	r3, r2
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	01db      	lsls	r3, r3, #7
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3384      	adds	r3, #132	; 0x84
 8001cc8:	4619      	mov	r1, r3
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cde:	4413      	add	r3, r2
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	01db      	lsls	r3, r3, #7
 8001cee:	4413      	add	r3, r2
 8001cf0:	3384      	adds	r3, #132	; 0x84
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	01d2      	lsls	r2, r2, #7
 8001cfe:	440a      	add	r2, r1
 8001d00:	3284      	adds	r2, #132	; 0x84
 8001d02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001d06:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d16:	4413      	add	r3, r2
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	01db      	lsls	r3, r3, #7
 8001d24:	440b      	add	r3, r1
 8001d26:	3384      	adds	r3, #132	; 0x84
 8001d28:	4619      	mov	r1, r3
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	01db      	lsls	r3, r3, #7
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3384      	adds	r3, #132	; 0x84
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	4611      	mov	r1, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	440a      	add	r2, r1
 8001d4c:	3284      	adds	r2, #132	; 0x84
 8001d4e:	f023 0307 	bic.w	r3, r3, #7
 8001d52:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	01db      	lsls	r3, r3, #7
 8001d5e:	4413      	add	r3, r2
 8001d60:	3384      	adds	r3, #132	; 0x84
 8001d62:	461a      	mov	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	061b      	lsls	r3, r3, #24
 8001d84:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	01db      	lsls	r3, r3, #7
 8001d90:	4413      	add	r3, r2
 8001d92:	3384      	adds	r3, #132	; 0x84
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	01db      	lsls	r3, r3, #7
 8001da0:	4413      	add	r3, r2
 8001da2:	3384      	adds	r3, #132	; 0x84
 8001da4:	461a      	mov	r2, r3
 8001da6:	2300      	movs	r3, #0
 8001da8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001db0:	461a      	mov	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	01db      	lsls	r3, r3, #7
 8001dc4:	440b      	add	r3, r1
 8001dc6:	3384      	adds	r3, #132	; 0x84
 8001dc8:	4619      	mov	r1, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	01db      	lsls	r3, r3, #7
 8001dda:	4413      	add	r3, r2
 8001ddc:	3384      	adds	r3, #132	; 0x84
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	4611      	mov	r1, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	01d2      	lsls	r2, r2, #7
 8001dea:	440a      	add	r2, r1
 8001dec:	3284      	adds	r2, #132	; 0x84
 8001dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001df2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	01db      	lsls	r3, r3, #7
 8001dfe:	4413      	add	r3, r2
 8001e00:	3384      	adds	r3, #132	; 0x84
 8001e02:	461a      	mov	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	01db      	lsls	r3, r3, #7
 8001e14:	4413      	add	r3, r2
 8001e16:	3384      	adds	r3, #132	; 0x84
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	01d2      	lsls	r2, r2, #7
 8001e24:	440a      	add	r2, r1
 8001e26:	3284      	adds	r2, #132	; 0x84
 8001e28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e2c:	f023 0307 	bic.w	r3, r3, #7
 8001e30:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	68f9      	ldr	r1, [r7, #12]
 8001e3c:	6809      	ldr	r1, [r1, #0]
 8001e3e:	4608      	mov	r0, r1
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	01c9      	lsls	r1, r1, #7
 8001e44:	4401      	add	r1, r0
 8001e46:	3184      	adds	r1, #132	; 0x84
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	01db      	lsls	r3, r3, #7
 8001e56:	4413      	add	r3, r2
 8001e58:	3384      	adds	r3, #132	; 0x84
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	01db      	lsls	r3, r3, #7
 8001e66:	4413      	add	r3, r2
 8001e68:	3384      	adds	r3, #132	; 0x84
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	01db      	lsls	r3, r3, #7
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3384      	adds	r3, #132	; 0x84
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e01b      	b.n	8001ecc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d102      	bne.n	8001ea2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	e014      	b.n	8001ecc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00b      	beq.n	8001ec2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d007      	beq.n	8001ec2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d003      	beq.n	8001ec2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001ebe:	2b07      	cmp	r3, #7
 8001ec0:	d102      	bne.n	8001ec8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e001      	b.n	8001ecc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	01db      	lsls	r3, r3, #7
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3384      	adds	r3, #132	; 0x84
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	01d2      	lsls	r2, r2, #7
 8001ee6:	440a      	add	r2, r1
 8001ee8:	3284      	adds	r2, #132	; 0x84
 8001eea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001eee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	1acb      	subs	r3, r1, r3
 8001f06:	69f9      	ldr	r1, [r7, #28]
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	3303      	adds	r3, #3
 8001f0e:	68f9      	ldr	r1, [r7, #12]
 8001f10:	6809      	ldr	r1, [r1, #0]
 8001f12:	4608      	mov	r0, r1
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	01c9      	lsls	r1, r1, #7
 8001f18:	4401      	add	r1, r0
 8001f1a:	3184      	adds	r1, #132	; 0x84
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	01db      	lsls	r3, r3, #7
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3384      	adds	r3, #132	; 0x84
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	4611      	mov	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	01d2      	lsls	r2, r2, #7
 8001f3a:	440a      	add	r2, r1
 8001f3c:	3284      	adds	r2, #132	; 0x84
 8001f3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f42:	f023 0307 	bic.w	r3, r3, #7
 8001f46:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	01db      	lsls	r3, r3, #7
 8001f52:	4413      	add	r3, r2
 8001f54:	3384      	adds	r3, #132	; 0x84
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	01db      	lsls	r3, r3, #7
 8001f68:	4413      	add	r3, r2
 8001f6a:	3384      	adds	r3, #132	; 0x84
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	4611      	mov	r1, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	01d2      	lsls	r2, r2, #7
 8001f78:	440a      	add	r2, r1
 8001f7a:	3284      	adds	r2, #132	; 0x84
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6013      	str	r3, [r2, #0]
}
 8001f82:	bf00      	nop
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_PWREx_EnableOverDrive+0x90>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <HAL_PWREx_EnableOverDrive+0x90>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_PWREx_EnableOverDrive+0x90>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_PWREx_EnableOverDrive+0x94>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fbc:	f7fe fafc 	bl	80005b8 <HAL_GetTick>
 8001fc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fc2:	e009      	b.n	8001fd8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fc4:	f7fe faf8 	bl	80005b8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd2:	d901      	bls.n	8001fd8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e01f      	b.n	8002018 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe4:	d1ee      	bne.n	8001fc4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fec:	f7fe fae4 	bl	80005b8 <HAL_GetTick>
 8001ff0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ff2:	e009      	b.n	8002008 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ff4:	f7fe fae0 	bl	80005b8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002002:	d901      	bls.n	8002008 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e007      	b.n	8002018 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_PWREx_EnableOverDrive+0x98>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002014:	d1ee      	bne.n	8001ff4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	420e0040 	.word	0x420e0040
 8002028:	40007000 	.word	0x40007000
 800202c:	420e0044 	.word	0x420e0044

08002030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e22d      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d075      	beq.n	800213a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204e:	4ba3      	ldr	r3, [pc, #652]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b04      	cmp	r3, #4
 8002058:	d00c      	beq.n	8002074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205a:	4ba0      	ldr	r3, [pc, #640]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002062:	2b08      	cmp	r3, #8
 8002064:	d112      	bne.n	800208c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002066:	4b9d      	ldr	r3, [pc, #628]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002072:	d10b      	bne.n	800208c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	4b99      	ldr	r3, [pc, #612]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05b      	beq.n	8002138 <HAL_RCC_OscConfig+0x108>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d157      	bne.n	8002138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e208      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002094:	d106      	bne.n	80020a4 <HAL_RCC_OscConfig+0x74>
 8002096:	4b91      	ldr	r3, [pc, #580]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a90      	ldr	r2, [pc, #576]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01d      	b.n	80020e0 <HAL_RCC_OscConfig+0xb0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x98>
 80020ae:	4b8b      	ldr	r3, [pc, #556]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a8a      	ldr	r2, [pc, #552]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b88      	ldr	r3, [pc, #544]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a87      	ldr	r2, [pc, #540]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0xb0>
 80020c8:	4b84      	ldr	r3, [pc, #528]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a83      	ldr	r2, [pc, #524]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b81      	ldr	r3, [pc, #516]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a80      	ldr	r2, [pc, #512]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fa66 	bl	80005b8 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f0:	f7fe fa62 	bl	80005b8 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1cd      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b76      	ldr	r3, [pc, #472]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0xc0>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fa52 	bl	80005b8 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002118:	f7fe fa4e 	bl	80005b8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	; 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1b9      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	4b6c      	ldr	r3, [pc, #432]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0xe8>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d063      	beq.n	800220e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002146:	4b65      	ldr	r3, [pc, #404]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002152:	4b62      	ldr	r3, [pc, #392]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800215a:	2b08      	cmp	r3, #8
 800215c:	d11c      	bne.n	8002198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215e:	4b5f      	ldr	r3, [pc, #380]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d116      	bne.n	8002198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	4b5c      	ldr	r3, [pc, #368]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x152>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e18d      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4b56      	ldr	r3, [pc, #344]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4952      	ldr	r1, [pc, #328]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	e03a      	b.n	800220e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <HAL_RCC_OscConfig+0x2b0>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7fe fa07 	bl	80005b8 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ae:	f7fe fa03 	bl	80005b8 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e16e      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4940      	ldr	r1, [pc, #256]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
 80021e0:	e015      	b.n	800220e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e2:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_RCC_OscConfig+0x2b0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe f9e6 	bl	80005b8 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f0:	f7fe f9e2 	bl	80005b8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e14d      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d030      	beq.n	800227c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002222:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <HAL_RCC_OscConfig+0x2b4>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002228:	f7fe f9c6 	bl	80005b8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002230:	f7fe f9c2 	bl	80005b8 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e12d      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x200>
 800224e:	e015      	b.n	800227c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002250:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_RCC_OscConfig+0x2b4>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7fe f9af 	bl	80005b8 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225e:	f7fe f9ab 	bl	80005b8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e116      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80a0 	beq.w	80023ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10f      	bne.n	80022ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_OscConfig+0x2b8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d121      	bne.n	800230a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_RCC_OscConfig+0x2b8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_RCC_OscConfig+0x2b8>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d2:	f7fe f971 	bl	80005b8 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	e011      	b.n	80022fe <HAL_RCC_OscConfig+0x2ce>
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	42470000 	.word	0x42470000
 80022e4:	42470e80 	.word	0x42470e80
 80022e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ec:	f7fe f964 	bl	80005b8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e0cf      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <HAL_RCC_OscConfig+0x478>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x2f0>
 8002312:	4b66      	ldr	r3, [pc, #408]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a65      	ldr	r2, [pc, #404]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
 800231e:	e01c      	b.n	800235a <HAL_RCC_OscConfig+0x32a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b05      	cmp	r3, #5
 8002326:	d10c      	bne.n	8002342 <HAL_RCC_OscConfig+0x312>
 8002328:	4b60      	ldr	r3, [pc, #384]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4a5f      	ldr	r2, [pc, #380]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	6713      	str	r3, [r2, #112]	; 0x70
 8002334:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a5c      	ldr	r2, [pc, #368]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	e00b      	b.n	800235a <HAL_RCC_OscConfig+0x32a>
 8002342:	4b5a      	ldr	r3, [pc, #360]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	4a59      	ldr	r2, [pc, #356]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6713      	str	r3, [r2, #112]	; 0x70
 800234e:	4b57      	ldr	r3, [pc, #348]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	4a56      	ldr	r2, [pc, #344]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d015      	beq.n	800238e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002362:	f7fe f929 	bl	80005b8 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe f925 	bl	80005b8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e08e      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	4b4a      	ldr	r3, [pc, #296]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0ee      	beq.n	800236a <HAL_RCC_OscConfig+0x33a>
 800238c:	e014      	b.n	80023b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7fe f913 	bl	80005b8 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7fe f90f 	bl	80005b8 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e078      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ee      	bne.n	8002396 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d105      	bne.n	80023ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023be:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a3a      	ldr	r2, [pc, #232]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 80023c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d064      	beq.n	800249c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d2:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d05c      	beq.n	8002498 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d141      	bne.n	800246a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <HAL_RCC_OscConfig+0x480>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe f8e4 	bl	80005b8 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe f8e0 	bl	80005b8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e04b      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	4b29      	ldr	r3, [pc, #164]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	019b      	lsls	r3, r3, #6
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	3b01      	subs	r3, #1
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	491d      	ldr	r1, [pc, #116]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800243c:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <HAL_RCC_OscConfig+0x480>)
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe f8b9 	bl	80005b8 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244a:	f7fe f8b5 	bl	80005b8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e020      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x41a>
 8002468:	e018      	b.n	800249c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_RCC_OscConfig+0x480>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe f8a2 	bl	80005b8 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe f89e 	bl	80005b8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e009      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_RCC_OscConfig+0x47c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x448>
 8002496:	e001      	b.n	800249c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40007000 	.word	0x40007000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	42470060 	.word	0x42470060

080024b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0ca      	b.n	800265e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b67      	ldr	r3, [pc, #412]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d90c      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b64      	ldr	r3, [pc, #400]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b62      	ldr	r3, [pc, #392]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b6      	b.n	800265e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002508:	4b58      	ldr	r3, [pc, #352]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a57      	ldr	r2, [pc, #348]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002520:	4b52      	ldr	r3, [pc, #328]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a51      	ldr	r2, [pc, #324]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 8002526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800252a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b4f      	ldr	r3, [pc, #316]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	494c      	ldr	r1, [pc, #304]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d044      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d119      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07d      	b.n	800265e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d003      	beq.n	8002572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256e:	2b03      	cmp	r3, #3
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b3e      	ldr	r3, [pc, #248]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06d      	b.n	800265e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3a      	ldr	r3, [pc, #232]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e065      	b.n	800265e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b36      	ldr	r3, [pc, #216]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4933      	ldr	r1, [pc, #204]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7fe f808 	bl	80005b8 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7fe f804 	bl	80005b8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e04d      	b.n	800265e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d20c      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e030      	b.n	800265e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4915      	ldr	r1, [pc, #84]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	490d      	ldr	r1, [pc, #52]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263a:	f000 f81d 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 800263e:	4601      	mov	r1, r0
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	fa21 f303 	lsr.w	r3, r1, r3
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002656:	2000      	movs	r0, #0
 8002658:	f7fd ff6a 	bl	8000530 <HAL_InitTick>

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023c00 	.word	0x40023c00
 800266c:	40023800 	.word	0x40023800
 8002670:	08008674 	.word	0x08008674
 8002674:	20000210 	.word	0x20000210

08002678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b04      	cmp	r3, #4
 8002698:	d007      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x32>
 800269a:	2b08      	cmp	r3, #8
 800269c:	d008      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x38>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 80b4 	bne.w	800280c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a4:	4b5e      	ldr	r3, [pc, #376]	; (8002820 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026a6:	60bb      	str	r3, [r7, #8]
       break;
 80026a8:	e0b3      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026aa:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80026ac:	60bb      	str	r3, [r7, #8]
      break;
 80026ae:	e0b0      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b0:	4b5a      	ldr	r3, [pc, #360]	; (800281c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ba:	4b58      	ldr	r3, [pc, #352]	; (800281c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d04a      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c6:	4b55      	ldr	r3, [pc, #340]	; (800281c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	f04f 0400 	mov.w	r4, #0
 80026d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	ea03 0501 	and.w	r5, r3, r1
 80026dc:	ea04 0602 	and.w	r6, r4, r2
 80026e0:	4629      	mov	r1, r5
 80026e2:	4632      	mov	r2, r6
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	f04f 0400 	mov.w	r4, #0
 80026ec:	0154      	lsls	r4, r2, #5
 80026ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026f2:	014b      	lsls	r3, r1, #5
 80026f4:	4619      	mov	r1, r3
 80026f6:	4622      	mov	r2, r4
 80026f8:	1b49      	subs	r1, r1, r5
 80026fa:	eb62 0206 	sbc.w	r2, r2, r6
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	f04f 0400 	mov.w	r4, #0
 8002706:	0194      	lsls	r4, r2, #6
 8002708:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800270c:	018b      	lsls	r3, r1, #6
 800270e:	1a5b      	subs	r3, r3, r1
 8002710:	eb64 0402 	sbc.w	r4, r4, r2
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	00e2      	lsls	r2, r4, #3
 800271e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002722:	00d9      	lsls	r1, r3, #3
 8002724:	460b      	mov	r3, r1
 8002726:	4614      	mov	r4, r2
 8002728:	195b      	adds	r3, r3, r5
 800272a:	eb44 0406 	adc.w	r4, r4, r6
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	0262      	lsls	r2, r4, #9
 8002738:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800273c:	0259      	lsls	r1, r3, #9
 800273e:	460b      	mov	r3, r1
 8002740:	4614      	mov	r4, r2
 8002742:	4618      	mov	r0, r3
 8002744:	4621      	mov	r1, r4
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f04f 0400 	mov.w	r4, #0
 800274c:	461a      	mov	r2, r3
 800274e:	4623      	mov	r3, r4
 8002750:	f7fd fd4c 	bl	80001ec <__aeabi_uldivmod>
 8002754:	4603      	mov	r3, r0
 8002756:	460c      	mov	r4, r1
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	e049      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275c:	4b2f      	ldr	r3, [pc, #188]	; (800281c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	f04f 0400 	mov.w	r4, #0
 8002766:	f240 11ff 	movw	r1, #511	; 0x1ff
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	ea03 0501 	and.w	r5, r3, r1
 8002772:	ea04 0602 	and.w	r6, r4, r2
 8002776:	4629      	mov	r1, r5
 8002778:	4632      	mov	r2, r6
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	f04f 0400 	mov.w	r4, #0
 8002782:	0154      	lsls	r4, r2, #5
 8002784:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002788:	014b      	lsls	r3, r1, #5
 800278a:	4619      	mov	r1, r3
 800278c:	4622      	mov	r2, r4
 800278e:	1b49      	subs	r1, r1, r5
 8002790:	eb62 0206 	sbc.w	r2, r2, r6
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	f04f 0400 	mov.w	r4, #0
 800279c:	0194      	lsls	r4, r2, #6
 800279e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027a2:	018b      	lsls	r3, r1, #6
 80027a4:	1a5b      	subs	r3, r3, r1
 80027a6:	eb64 0402 	sbc.w	r4, r4, r2
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	00e2      	lsls	r2, r4, #3
 80027b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027b8:	00d9      	lsls	r1, r3, #3
 80027ba:	460b      	mov	r3, r1
 80027bc:	4614      	mov	r4, r2
 80027be:	195b      	adds	r3, r3, r5
 80027c0:	eb44 0406 	adc.w	r4, r4, r6
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	02a2      	lsls	r2, r4, #10
 80027ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027d2:	0299      	lsls	r1, r3, #10
 80027d4:	460b      	mov	r3, r1
 80027d6:	4614      	mov	r4, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	4621      	mov	r1, r4
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f04f 0400 	mov.w	r4, #0
 80027e2:	461a      	mov	r2, r3
 80027e4:	4623      	mov	r3, r4
 80027e6:	f7fd fd01 	bl	80001ec <__aeabi_uldivmod>
 80027ea:	4603      	mov	r3, r0
 80027ec:	460c      	mov	r4, r1
 80027ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	3301      	adds	r3, #1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	60bb      	str	r3, [r7, #8]
      break;
 800280a:	e002      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800280e:	60bb      	str	r3, [r7, #8]
      break;
 8002810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002812:	68bb      	ldr	r3, [r7, #8]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	00f42400 	.word	0x00f42400
 8002824:	007a1200 	.word	0x007a1200

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_GetHCLKFreq+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000210 	.word	0x20000210

08002840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002844:	f7ff fff0 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002848:	4601      	mov	r1, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0a9b      	lsrs	r3, r3, #10
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4a03      	ldr	r2, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	fa21 f303 	lsr.w	r3, r1, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	08008684 	.word	0x08008684

08002868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800286c:	f7ff ffdc 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002870:	4601      	mov	r1, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0b5b      	lsrs	r3, r3, #13
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4a03      	ldr	r2, [pc, #12]	; (800288c <HAL_RCC_GetPCLK2Freq+0x24>)
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	08008684 	.word	0x08008684

08002890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d061      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028b8:	4ba3      	ldr	r3, [pc, #652]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028be:	f7fd fe7b 	bl	80005b8 <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028c6:	f7fd fe77 	bl	80005b8 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e177      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028d8:	4b9c      	ldr	r3, [pc, #624]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	019a      	lsls	r2, r3, #6
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	071b      	lsls	r3, r3, #28
 80028fc:	4993      	ldr	r1, [pc, #588]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01f      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002910:	4b8e      	ldr	r3, [pc, #568]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002916:	0f1b      	lsrs	r3, r3, #28
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	019a      	lsls	r2, r3, #6
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	431a      	orrs	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	071b      	lsls	r3, r3, #28
 8002930:	4986      	ldr	r1, [pc, #536]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002938:	4b84      	ldr	r3, [pc, #528]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800293a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293e:	f023 021f 	bic.w	r2, r3, #31
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	3b01      	subs	r3, #1
 8002948:	4980      	ldr	r1, [pc, #512]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002950:	4b7d      	ldr	r3, [pc, #500]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002956:	f7fd fe2f 	bl	80005b8 <HAL_GetTick>
 800295a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800295e:	f7fd fe2b 	bl	80005b8 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e12b      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002970:	4b76      	ldr	r3, [pc, #472]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002990:	2b00      	cmp	r3, #0
 8002992:	d079      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002994:	4b6e      	ldr	r3, [pc, #440]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800299a:	f7fd fe0d 	bl	80005b8 <HAL_GetTick>
 800299e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80029a2:	f7fd fe09 	bl	80005b8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e109      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029b4:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c0:	d0ef      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d020      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029ce:	4b5f      	ldr	r3, [pc, #380]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	0f1b      	lsrs	r3, r3, #28
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	019a      	lsls	r2, r3, #6
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	431a      	orrs	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	071b      	lsls	r3, r3, #28
 80029ee:	4957      	ldr	r1, [pc, #348]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029f6:	4b55      	ldr	r3, [pc, #340]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	4950      	ldr	r1, [pc, #320]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01e      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a1c:	4b4b      	ldr	r3, [pc, #300]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	0e1b      	lsrs	r3, r3, #24
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	019a      	lsls	r2, r3, #6
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	071b      	lsls	r3, r3, #28
 8002a3c:	4943      	ldr	r1, [pc, #268]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a44:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	493e      	ldr	r1, [pc, #248]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a5a:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a60:	f7fd fdaa 	bl	80005b8 <HAL_GetTick>
 8002a64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a68:	f7fd fda6 	bl	80005b8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0a6      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a7a:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a86:	d1ef      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 808d 	beq.w	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ab2:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a27      	ldr	r2, [pc, #156]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002abe:	f7fd fd7b 	bl	80005b8 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ac6:	f7fd fd77 	bl	80005b8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e077      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d039      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d032      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b18:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d11e      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fd fd45 	bl	80005b8 <HAL_GetTick>
 8002b2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b30:	e014      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fd fd41 	bl	80005b8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d90b      	bls.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e03f      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8002b48:	42470068 	.word	0x42470068
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	42470070 	.word	0x42470070
 8002b54:	40007000 	.word	0x40007000
 8002b58:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0e4      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b74:	d10d      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8a:	4911      	ldr	r1, [pc, #68]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]
 8002b90:	e005      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002b98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b9c:	6093      	str	r3, [r2, #8]
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ba0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002baa:	4909      	ldr	r1, [pc, #36]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002bc4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	424711e0 	.word	0x424711e0

08002bd8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e01c      	b.n	8002c24 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	795b      	ldrb	r3, [r3, #5]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f003 fd96 	bl	800672c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0204 	orr.w	r2, r2, #4
 8002c14:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_RNG_GenerateRandomNumber+0x1a>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e03d      	b.n	8002cc2 <HAL_RNG_GenerateRandomNumber+0x96>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	795b      	ldrb	r3, [r3, #5]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d12c      	bne.n	8002cb0 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7fd fcac 	bl	80005b8 <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002c62:	e011      	b.n	8002c88 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002c64:	f7fd fca8 	bl	80005b8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d90a      	bls.n	8002c88 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e01c      	b.n	8002cc2 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d1e6      	bne.n	8002c64 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	715a      	strb	r2, [r3, #5]
 8002cae:	e004      	b.n	8002cba <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	711a      	strb	r2, [r3, #4]

  return status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e025      	b.n	8002d2a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f003 fe84 	bl	8006a00 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f001 fac4 	bl	8004298 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6839      	ldr	r1, [r7, #0]
 8002d1c:	f001 fb2f 	bl	800437e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d101      	bne.n	8002d4e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e018      	b.n	8002d80 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fb8c 	bl	800447c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d104      	bne.n	8002d76 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2205      	movs	r2, #5
 8002d70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002d74:	e003      	b.n	8002d7e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d101      	bne.n	8002da2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e00e      	b.n	8002dc0 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6839      	ldr	r1, [r7, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 fb9f 	bl	80044f4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e056      	b.n	8002e88 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f003 fcbb 	bl	8006770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	ea42 0103 	orr.w	r1, r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	0c1b      	lsrs	r3, r3, #16
 8002e58:	f003 0104 	and.w	r1, r3, #4
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e01a      	b.n	8002ed8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f003 fca0 	bl	8006800 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_SPI_Transmit+0x22>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e11e      	b.n	8003140 <HAL_SPI_Transmit+0x260>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f0a:	f7fd fb55 	bl	80005b8 <HAL_GetTick>
 8002f0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d002      	beq.n	8002f26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f20:	2302      	movs	r3, #2
 8002f22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f24:	e103      	b.n	800312e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_SPI_Transmit+0x52>
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f36:	e0fa      	b.n	800312e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7e:	d107      	bne.n	8002f90 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	d007      	beq.n	8002fae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb6:	d14b      	bne.n	8003050 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_SPI_Transmit+0xe6>
 8002fc0:	8afb      	ldrh	r3, [r7, #22]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d13e      	bne.n	8003044 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	881a      	ldrh	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	1c9a      	adds	r2, r3, #2
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fea:	e02b      	b.n	8003044 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d112      	bne.n	8003020 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	86da      	strh	r2, [r3, #54]	; 0x36
 800301e:	e011      	b.n	8003044 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd faca 	bl	80005b8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Transmit+0x158>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Transmit+0x15e>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003042:	e074      	b.n	800312e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ce      	bne.n	8002fec <HAL_SPI_Transmit+0x10c>
 800304e:	e04c      	b.n	80030ea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_SPI_Transmit+0x17e>
 8003058:	8afb      	ldrh	r3, [r7, #22]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d140      	bne.n	80030e0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003084:	e02c      	b.n	80030e0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b02      	cmp	r3, #2
 8003092:	d113      	bne.n	80030bc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	330c      	adds	r3, #12
 800309e:	7812      	ldrb	r2, [r2, #0]
 80030a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80030ba:	e011      	b.n	80030e0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030bc:	f7fd fa7c 	bl	80005b8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d803      	bhi.n	80030d4 <HAL_SPI_Transmit+0x1f4>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d102      	bne.n	80030da <HAL_SPI_Transmit+0x1fa>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030de:	e026      	b.n	800312e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1cd      	bne.n	8003086 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fbb2 	bl	8003858 <SPI_EndRxTxTransaction>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003108:	2300      	movs	r3, #0
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e000      	b.n	800312e <HAL_SPI_Transmit+0x24e>
  }

error:
 800312c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800313e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003164:	d112      	bne.n	800318c <HAL_SPI_Receive+0x44>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10e      	bne.n	800318c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2204      	movs	r2, #4
 8003172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f8e9 	bl	800335a <HAL_SPI_TransmitReceive>
 8003188:	4603      	mov	r3, r0
 800318a:	e0e2      	b.n	8003352 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_SPI_Receive+0x52>
 8003196:	2302      	movs	r3, #2
 8003198:	e0db      	b.n	8003352 <HAL_SPI_Receive+0x20a>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a2:	f7fd fa09 	bl	80005b8 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d002      	beq.n	80031ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
 80031b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031b8:	e0c2      	b.n	8003340 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_SPI_Receive+0x7e>
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031ca:	e0b9      	b.n	8003340 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2204      	movs	r2, #4
 80031d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	88fa      	ldrh	r2, [r7, #6]
 80031ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003212:	d107      	bne.n	8003224 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003222:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d007      	beq.n	8003242 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d162      	bne.n	8003310 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800324a:	e02e      	b.n	80032aa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d115      	bne.n	8003286 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f103 020c 	add.w	r2, r3, #12
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003284:	e011      	b.n	80032aa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003286:	f7fd f997 	bl	80005b8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d803      	bhi.n	800329e <HAL_SPI_Receive+0x156>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d102      	bne.n	80032a4 <HAL_SPI_Receive+0x15c>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032a8:	e04a      	b.n	8003340 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1cb      	bne.n	800324c <HAL_SPI_Receive+0x104>
 80032b4:	e031      	b.n	800331a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d113      	bne.n	80032ec <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	b292      	uxth	r2, r2
 80032d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	1c9a      	adds	r2, r3, #2
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032ea:	e011      	b.n	8003310 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ec:	f7fd f964 	bl	80005b8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d803      	bhi.n	8003304 <HAL_SPI_Receive+0x1bc>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d102      	bne.n	800330a <HAL_SPI_Receive+0x1c2>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800330e:	e017      	b.n	8003340 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1cd      	bne.n	80032b6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fa35 	bl	800378e <SPI_EndRxTransaction>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	75fb      	strb	r3, [r7, #23]
 800333c:	e000      	b.n	8003340 <HAL_SPI_Receive+0x1f8>
  }

error :
 800333e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003350:	7dfb      	ldrb	r3, [r7, #23]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b08c      	sub	sp, #48	; 0x30
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003368:	2301      	movs	r3, #1
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_SPI_TransmitReceive+0x26>
 800337c:	2302      	movs	r3, #2
 800337e:	e18a      	b.n	8003696 <HAL_SPI_TransmitReceive+0x33c>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003388:	f7fd f916 	bl	80005b8 <HAL_GetTick>
 800338c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d00f      	beq.n	80033ca <HAL_SPI_TransmitReceive+0x70>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b0:	d107      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x68>
 80033ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d003      	beq.n	80033ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
 80033c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033c8:	e15b      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_SPI_TransmitReceive+0x82>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_SPI_TransmitReceive+0x82>
 80033d6:	887b      	ldrh	r3, [r7, #2]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033e2:	e14e      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d003      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2205      	movs	r2, #5
 80033f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	887a      	ldrh	r2, [r7, #2]
 800340e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d007      	beq.n	800344c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800344a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003454:	d178      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x10a>
 800345e:	8b7b      	ldrh	r3, [r7, #26]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d166      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	881a      	ldrh	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003488:	e053      	b.n	8003532 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d11b      	bne.n	80034d0 <HAL_SPI_TransmitReceive+0x176>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x176>
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d113      	bne.n	80034d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	881a      	ldrh	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	1c9a      	adds	r2, r3, #2
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d119      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x1b8>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d014      	beq.n	8003512 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	b292      	uxth	r2, r2
 80034f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	1c9a      	adds	r2, r3, #2
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800350e:	2301      	movs	r3, #1
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003512:	f7fd f851 	bl	80005b8 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800351e:	429a      	cmp	r2, r3
 8003520:	d807      	bhi.n	8003532 <HAL_SPI_TransmitReceive+0x1d8>
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d003      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003530:	e0a7      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1a6      	bne.n	800348a <HAL_SPI_TransmitReceive+0x130>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1a1      	bne.n	800348a <HAL_SPI_TransmitReceive+0x130>
 8003546:	e07c      	b.n	8003642 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_SPI_TransmitReceive+0x1fc>
 8003550:	8b7b      	ldrh	r3, [r7, #26]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d16b      	bne.n	800362e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800357c:	e057      	b.n	800362e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	d11c      	bne.n	80035c6 <HAL_SPI_TransmitReceive+0x26c>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d017      	beq.n	80035c6 <HAL_SPI_TransmitReceive+0x26c>
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d114      	bne.n	80035c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	330c      	adds	r3, #12
 80035a6:	7812      	ldrb	r2, [r2, #0]
 80035a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d119      	bne.n	8003608 <HAL_SPI_TransmitReceive+0x2ae>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d014      	beq.n	8003608 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003604:	2301      	movs	r3, #1
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003608:	f7fc ffd6 	bl	80005b8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003614:	429a      	cmp	r2, r3
 8003616:	d803      	bhi.n	8003620 <HAL_SPI_TransmitReceive+0x2c6>
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d102      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x2cc>
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800362c:	e029      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1a2      	bne.n	800357e <HAL_SPI_TransmitReceive+0x224>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d19d      	bne.n	800357e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f906 	bl	8003858 <SPI_EndRxTxTransaction>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800365e:	e010      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	e000      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003680:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003692:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003696:	4618      	mov	r0, r3
 8003698:	3730      	adds	r7, #48	; 0x30
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ac:	b2db      	uxtb	r3, r3
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	603b      	str	r3, [r7, #0]
 80036c6:	4613      	mov	r3, r2
 80036c8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ca:	e04c      	b.n	8003766 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d048      	beq.n	8003766 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80036d4:	f7fc ff70 	bl	80005b8 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d902      	bls.n	80036ea <SPI_WaitFlagStateUntilTimeout+0x30>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d13d      	bne.n	8003766 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003702:	d111      	bne.n	8003728 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370c:	d004      	beq.n	8003718 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003716:	d107      	bne.n	8003728 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003726:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003730:	d10f      	bne.n	8003752 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003750:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e00f      	b.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	429a      	cmp	r2, r3
 8003782:	d1a3      	bne.n	80036cc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af02      	add	r7, sp, #8
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a2:	d111      	bne.n	80037c8 <SPI_EndRxTransaction+0x3a>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ac:	d004      	beq.n	80037b8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b6:	d107      	bne.n	80037c8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037d0:	d12a      	bne.n	8003828 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037da:	d012      	beq.n	8003802 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2200      	movs	r2, #0
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f7ff ff67 	bl	80036ba <SPI_WaitFlagStateUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02d      	beq.n	800384e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e026      	b.n	8003850 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2200      	movs	r2, #0
 800380a:	2101      	movs	r1, #1
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff ff54 	bl	80036ba <SPI_WaitFlagStateUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01a      	beq.n	800384e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e013      	b.n	8003850 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	2101      	movs	r1, #1
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff ff41 	bl	80036ba <SPI_WaitFlagStateUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e000      	b.n	8003850 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <SPI_EndRxTxTransaction+0x7c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <SPI_EndRxTxTransaction+0x80>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	0d5b      	lsrs	r3, r3, #21
 8003870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003882:	d112      	bne.n	80038aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2200      	movs	r2, #0
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7ff ff13 	bl	80036ba <SPI_WaitFlagStateUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f043 0220 	orr.w	r2, r3, #32
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e00f      	b.n	80038ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d0f2      	beq.n	80038aa <SPI_EndRxTxTransaction+0x52>
 80038c4:	e000      	b.n	80038c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80038c6:	bf00      	nop
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000210 	.word	0x20000210
 80038d8:	165e9f81 	.word	0x165e9f81

080038dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e03f      	b.n	800396e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f002 ff9a 	bl	800683c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	; 0x24
 800390c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 faaf 	bl	8003e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	4613      	mov	r3, r2
 8003982:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b20      	cmp	r3, #32
 800398e:	d140      	bne.n	8003a12 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_UART_Receive_IT+0x26>
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e039      	b.n	8003a14 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Receive_IT+0x38>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e032      	b.n	8003a14 <HAL_UART_Receive_IT+0x9e>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2222      	movs	r2, #34	; 0x22
 80039d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ec:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0220 	orr.w	r2, r2, #32
 8003a0c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
  }
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_UART_IRQHandler+0x52>
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f988 	bl	8003d80 <UART_Receive_IT>
      return;
 8003a70:	e0cc      	b.n	8003c0c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80ab 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x1b0>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <HAL_UART_IRQHandler+0x70>
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80a0 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x90>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	f043 0201 	orr.w	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_UART_IRQHandler+0xb0>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	f043 0202 	orr.w	r2, r3, #2
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_UART_IRQHandler+0xd0>
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae8:	f043 0204 	orr.w	r2, r3, #4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_UART_IRQHandler+0xf0>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	f043 0208 	orr.w	r2, r3, #8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d078      	beq.n	8003c0a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_UART_IRQHandler+0x112>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f927 	bl	8003d80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <HAL_UART_IRQHandler+0x13a>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d031      	beq.n	8003bbe <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f870 	bl	8003c40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d123      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d013      	beq.n	8003bae <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <HAL_UART_IRQHandler+0x1f4>)
 8003b8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fc ff5c 	bl	8000a50 <HAL_DMA_Abort_IT>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	e00e      	b.n	8003bcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f83c 	bl	8003c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	e00a      	b.n	8003bcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f838 	bl	8003c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	e006      	b.n	8003bcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f834 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003bca:	e01e      	b.n	8003c0a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	bf00      	nop
    return;
 8003bce:	e01c      	b.n	8003c0a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_UART_IRQHandler+0x1cc>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f85d 	bl	8003ca4 <UART_Transmit_IT>
    return;
 8003bea:	e00f      	b.n	8003c0c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_UART_IRQHandler+0x1ec>
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f8a5 	bl	8003d50 <UART_EndTransmit_IT>
    return;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HAL_UART_IRQHandler+0x1ec>
    return;
 8003c0a:	bf00      	nop
  }
}
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	08003c7d 	.word	0x08003c7d

08003c18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ffc8 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b21      	cmp	r3, #33	; 0x21
 8003cb6:	d144      	bne.n	8003d42 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d11a      	bne.n	8003cf8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]
 8003cea:	e00e      	b.n	8003d0a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	621a      	str	r2, [r3, #32]
 8003cf6:	e008      	b.n	8003d0a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	1c59      	adds	r1, r3, #1
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6211      	str	r1, [r2, #32]
 8003d02:	781a      	ldrb	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4619      	mov	r1, r3
 8003d18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e000      	b.n	8003d44 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
  }
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff51 	bl	8003c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b22      	cmp	r3, #34	; 0x22
 8003d92:	d171      	bne.n	8003e78 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d123      	bne.n	8003de6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10e      	bne.n	8003dca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	1c9a      	adds	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc8:	e029      	b.n	8003e1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28
 8003de4:	e01b      	b.n	8003e1e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6858      	ldr	r0, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	1c59      	adds	r1, r3, #1
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6291      	str	r1, [r2, #40]	; 0x28
 8003dfe:	b2c2      	uxtb	r2, r0
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e00c      	b.n	8003e1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	1c58      	adds	r0, r3, #1
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	6288      	str	r0, [r1, #40]	; 0x28
 8003e16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d120      	bne.n	8003e74 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0220 	bic.w	r2, r2, #32
 8003e40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f001 f8c6 	bl	8004ffc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e002      	b.n	8003e7a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e84:	b5b0      	push	{r4, r5, r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ec4:	f023 030c 	bic.w	r3, r3, #12
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef0:	f040 80e4 	bne.w	80040bc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4aab      	ldr	r2, [pc, #684]	; (80041a8 <UART_SetConfig+0x324>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <UART_SetConfig+0x84>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4aaa      	ldr	r2, [pc, #680]	; (80041ac <UART_SetConfig+0x328>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d16c      	bne.n	8003fe2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f08:	f7fe fcae 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009a      	lsls	r2, r3, #2
 8003f16:	441a      	add	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	4aa3      	ldr	r2, [pc, #652]	; (80041b0 <UART_SetConfig+0x32c>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	011c      	lsls	r4, r3, #4
 8003f2c:	f7fe fc9c 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009a      	lsls	r2, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f46:	f7fe fc8f 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009a      	lsls	r2, r3, #2
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	4a93      	ldr	r2, [pc, #588]	; (80041b0 <UART_SetConfig+0x32c>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2264      	movs	r2, #100	; 0x64
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	1aeb      	subs	r3, r5, r3
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	3332      	adds	r3, #50	; 0x32
 8003f74:	4a8e      	ldr	r2, [pc, #568]	; (80041b0 <UART_SetConfig+0x32c>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f82:	441c      	add	r4, r3
 8003f84:	f7fe fc70 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	441a      	add	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f9e:	f7fe fc63 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009a      	lsls	r2, r3, #2
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	4a7d      	ldr	r2, [pc, #500]	; (80041b0 <UART_SetConfig+0x32c>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2264      	movs	r2, #100	; 0x64
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	1aeb      	subs	r3, r5, r3
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	3332      	adds	r3, #50	; 0x32
 8003fcc:	4a78      	ldr	r2, [pc, #480]	; (80041b0 <UART_SetConfig+0x32c>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	f003 0207 	and.w	r2, r3, #7
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4422      	add	r2, r4
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	e154      	b.n	800428c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003fe2:	f7fe fc2d 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009a      	lsls	r2, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	4a6c      	ldr	r2, [pc, #432]	; (80041b0 <UART_SetConfig+0x32c>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	011c      	lsls	r4, r3, #4
 8004006:	f7fe fc1b 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 800400a:	4602      	mov	r2, r0
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004020:	f7fe fc0e 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8004024:	4602      	mov	r2, r0
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009a      	lsls	r2, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	4a5d      	ldr	r2, [pc, #372]	; (80041b0 <UART_SetConfig+0x32c>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	2264      	movs	r2, #100	; 0x64
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	1aeb      	subs	r3, r5, r3
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	3332      	adds	r3, #50	; 0x32
 800404e:	4a58      	ldr	r2, [pc, #352]	; (80041b0 <UART_SetConfig+0x32c>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800405c:	441c      	add	r4, r3
 800405e:	f7fe fbef 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8004062:	4602      	mov	r2, r0
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009a      	lsls	r2, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	fbb2 f5f3 	udiv	r5, r2, r3
 8004078:	f7fe fbe2 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 800407c:	4602      	mov	r2, r0
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009a      	lsls	r2, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	4a47      	ldr	r2, [pc, #284]	; (80041b0 <UART_SetConfig+0x32c>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	2264      	movs	r2, #100	; 0x64
 800409c:	fb02 f303 	mul.w	r3, r2, r3
 80040a0:	1aeb      	subs	r3, r5, r3
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	3332      	adds	r3, #50	; 0x32
 80040a6:	4a42      	ldr	r2, [pc, #264]	; (80041b0 <UART_SetConfig+0x32c>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	f003 0207 	and.w	r2, r3, #7
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4422      	add	r2, r4
 80040b8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80040ba:	e0e7      	b.n	800428c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a39      	ldr	r2, [pc, #228]	; (80041a8 <UART_SetConfig+0x324>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <UART_SetConfig+0x24c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <UART_SetConfig+0x328>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d171      	bne.n	80041b4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80040d0:	f7fe fbca 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	009a      	lsls	r2, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	4a31      	ldr	r2, [pc, #196]	; (80041b0 <UART_SetConfig+0x32c>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	011c      	lsls	r4, r3, #4
 80040f4:	f7fe fbb8 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009a      	lsls	r2, r3, #2
 8004102:	441a      	add	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	fbb2 f5f3 	udiv	r5, r2, r3
 800410e:	f7fe fbab 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8004112:	4602      	mov	r2, r0
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009a      	lsls	r2, r3, #2
 800411c:	441a      	add	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	4a21      	ldr	r2, [pc, #132]	; (80041b0 <UART_SetConfig+0x32c>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	2264      	movs	r2, #100	; 0x64
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	1aeb      	subs	r3, r5, r3
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	3332      	adds	r3, #50	; 0x32
 800413c:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <UART_SetConfig+0x32c>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004148:	441c      	add	r4, r3
 800414a:	f7fe fb8d 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 800414e:	4602      	mov	r2, r0
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009a      	lsls	r2, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	fbb2 f5f3 	udiv	r5, r2, r3
 8004164:	f7fe fb80 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8004168:	4602      	mov	r2, r0
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009a      	lsls	r2, r3, #2
 8004172:	441a      	add	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	4a0c      	ldr	r2, [pc, #48]	; (80041b0 <UART_SetConfig+0x32c>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2264      	movs	r2, #100	; 0x64
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	1aeb      	subs	r3, r5, r3
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	3332      	adds	r3, #50	; 0x32
 8004192:	4a07      	ldr	r2, [pc, #28]	; (80041b0 <UART_SetConfig+0x32c>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4422      	add	r2, r4
 80041a4:	609a      	str	r2, [r3, #8]
 80041a6:	e071      	b.n	800428c <UART_SetConfig+0x408>
 80041a8:	40011000 	.word	0x40011000
 80041ac:	40011400 	.word	0x40011400
 80041b0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80041b4:	f7fe fb44 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	009a      	lsls	r2, r3, #2
 80041c2:	441a      	add	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	4a31      	ldr	r2, [pc, #196]	; (8004294 <UART_SetConfig+0x410>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	011c      	lsls	r4, r3, #4
 80041d8:	f7fe fb32 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009a      	lsls	r2, r3, #2
 80041e6:	441a      	add	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80041f2:	f7fe fb25 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	009a      	lsls	r2, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	4a21      	ldr	r2, [pc, #132]	; (8004294 <UART_SetConfig+0x410>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2264      	movs	r2, #100	; 0x64
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	1aeb      	subs	r3, r5, r3
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	3332      	adds	r3, #50	; 0x32
 8004220:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <UART_SetConfig+0x410>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422c:	441c      	add	r4, r3
 800422e:	f7fe fb07 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8004232:	4602      	mov	r2, r0
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009a      	lsls	r2, r3, #2
 800423c:	441a      	add	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	fbb2 f5f3 	udiv	r5, r2, r3
 8004248:	f7fe fafa 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 800424c:	4602      	mov	r2, r0
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009a      	lsls	r2, r3, #2
 8004256:	441a      	add	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004262:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <UART_SetConfig+0x410>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2264      	movs	r2, #100	; 0x64
 800426c:	fb02 f303 	mul.w	r3, r2, r3
 8004270:	1aeb      	subs	r3, r5, r3
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a07      	ldr	r2, [pc, #28]	; (8004294 <UART_SetConfig+0x410>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 020f 	and.w	r2, r3, #15
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4422      	add	r2, r4
 8004288:	609a      	str	r2, [r3, #8]
}
 800428a:	e7ff      	b.n	800428c <UART_SetConfig+0x408>
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bdb0      	pop	{r4, r5, r7, pc}
 8004294:	51eb851f 	.word	0x51eb851f

08004298 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d029      	beq.n	8004306 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80042be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80042c2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80042cc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80042d2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80042d8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80042de:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80042e4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80042ea:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80042f0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80042f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e034      	b.n	8004370 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004312:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800431c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004322:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004336:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800433a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004344:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800434a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8004350:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004356:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800435c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4313      	orrs	r3, r2
 8004362:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800437e:	b480      	push	{r7}
 8004380:	b087      	sub	sp, #28
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d02e      	beq.n	80043f6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043a4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80043b4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80043be:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80043c8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80043d2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	3b01      	subs	r3, #1
 80043da:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80043dc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80043e6:	4313      	orrs	r3, r2
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	e03b      	b.n	800446e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004406:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	3b01      	subs	r3, #1
 800440e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	3b01      	subs	r3, #1
 8004416:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004418:	4313      	orrs	r3, r2
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800442c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	3b01      	subs	r3, #1
 800443a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800443c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	3b01      	subs	r3, #1
 8004444:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004446:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	3b01      	subs	r3, #1
 800444e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004450:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	3b01      	subs	r3, #1
 8004458:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800445a:	4313      	orrs	r3, r2
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004498:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	3b01      	subs	r3, #1
 80044a0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80044a2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80044b4:	f7fc f880 	bl	80005b8 <HAL_GetTick>
 80044b8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80044ba:	e010      	b.n	80044de <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d00c      	beq.n	80044de <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <FMC_SDRAM_SendCommand+0x5e>
 80044ca:	f7fc f875 	bl	80005b8 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d201      	bcs.n	80044de <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e006      	b.n	80044ec <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d0e8      	beq.n	80044bc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <InitNewBlockPos>:
extern RNG_HandleTypeDef hrng;
uint32_t u32randomNumber;


void InitNewBlockPos(int x, int y)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]

	if(x<0 || y<0) return;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	db09      	blt.n	8004540 <InitNewBlockPos+0x24>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	db06      	blt.n	8004540 <InitNewBlockPos+0x24>

	curPosX = x;
 8004532:	4a06      	ldr	r2, [pc, #24]	; (800454c <InitNewBlockPos+0x30>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6013      	str	r3, [r2, #0]
	curPosY = y;
 8004538:	4a05      	ldr	r2, [pc, #20]	; (8004550 <InitNewBlockPos+0x34>)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e000      	b.n	8004542 <InitNewBlockPos+0x26>
	if(x<0 || y<0) return;
 8004540:	bf00      	nop

}
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	20000e34 	.word	0x20000e34
 8004550:	20000e38 	.word	0x20000e38

08004554 <ChooseBlock>:

void ChooseBlock(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	HAL_RNG_GenerateRandomNumber(&hrng, &u32randomNumber);
 8004558:	490b      	ldr	r1, [pc, #44]	; (8004588 <ChooseBlock+0x34>)
 800455a:	480c      	ldr	r0, [pc, #48]	; (800458c <ChooseBlock+0x38>)
 800455c:	f7fe fb66 	bl	8002c2c <HAL_RNG_GenerateRandomNumber>
	currentBlockModel = (u32randomNumber % NUM_OF_BLOCK_MODEL) * 4;
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <ChooseBlock+0x34>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <ChooseBlock+0x3c>)
 8004566:	fba3 2301 	umull	r2, r3, r3, r1
 800456a:	1aca      	subs	r2, r1, r3
 800456c:	0852      	lsrs	r2, r2, #1
 800456e:	4413      	add	r3, r2
 8004570:	089a      	lsrs	r2, r3, #2
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	1aca      	subs	r2, r1, r3
 800457a:	0093      	lsls	r3, r2, #2
 800457c:	461a      	mov	r2, r3
 800457e:	4b05      	ldr	r3, [pc, #20]	; (8004594 <ChooseBlock+0x40>)
 8004580:	601a      	str	r2, [r3, #0]

}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000ff0 	.word	0x20000ff0
 800458c:	20001188 	.word	0x20001188
 8004590:	24924925 	.word	0x24924925
 8004594:	20000e30 	.word	0x20000e30

08004598 <GetCurrentBlockIdx>:

int GetCurrentBlockIdx(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
	return currentBlockModel + rotateSte;
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <GetCurrentBlockIdx+0x18>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <GetCurrentBlockIdx+0x1c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4413      	add	r3, r2
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	20000e30 	.word	0x20000e30
 80045b4:	20000e3c 	.word	0x20000e3c

080045b8 <ShowBlock>:


void ShowBlock(char blockInfo[][4])
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	int x, y;

	for(y=0; y<4; y++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	e027      	b.n	8004616 <ShowBlock+0x5e>
	{
		for(x=0; x<4; x++)
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e01e      	b.n	800460a <ShowBlock+0x52>
		{
			if(blockInfo[y][x]==1)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	441a      	add	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d112      	bne.n	8004604 <ShowBlock+0x4c>
			{
				DrawBlock(curPosX+x, curPosY+y, LCD_COLOR_WHITE, LCD_COLOR_RED);
 80045de:	4b11      	ldr	r3, [pc, #68]	; (8004624 <ShowBlock+0x6c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	b298      	uxth	r0, r3
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <ShowBlock+0x70>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	4413      	add	r3, r2
 80045f8:	b299      	uxth	r1, r3
 80045fa:	4b0c      	ldr	r3, [pc, #48]	; (800462c <ShowBlock+0x74>)
 80045fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004600:	f000 f88a 	bl	8004718 <DrawBlock>
		for(x=0; x<4; x++)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b03      	cmp	r3, #3
 800460e:	dddd      	ble.n	80045cc <ShowBlock+0x14>
	for(y=0; y<4; y++)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	3301      	adds	r3, #1
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b03      	cmp	r3, #3
 800461a:	ddd4      	ble.n	80045c6 <ShowBlock+0xe>
			}
		}
	}
}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000e34 	.word	0x20000e34
 8004628:	20000e38 	.word	0x20000e38
 800462c:	ffff0000 	.word	0xffff0000

08004630 <DeleteBlock>:

void DeleteBlock(char blockInfo[][4])
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	uint16_t x, y;

	for(y = 0; y<4; y++)
 8004638:	2300      	movs	r3, #0
 800463a:	81bb      	strh	r3, [r7, #12]
 800463c:	e023      	b.n	8004686 <DeleteBlock+0x56>
	{
		for(x=0; x<4; x++)
 800463e:	2300      	movs	r3, #0
 8004640:	81fb      	strh	r3, [r7, #14]
 8004642:	e01a      	b.n	800467a <DeleteBlock+0x4a>
		{
			if(blockInfo[y][x]==1)
 8004644:	89bb      	ldrh	r3, [r7, #12]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	441a      	add	r2, r3
 800464c:	89fb      	ldrh	r3, [r7, #14]
 800464e:	5cd3      	ldrb	r3, [r2, r3]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d10f      	bne.n	8004674 <DeleteBlock+0x44>
			{
				DrawBlock(curPosX+x, curPosY+y, LCD_COLOR_BLUE, LCD_COLOR_BLUE);
 8004654:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <DeleteBlock+0x64>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b29a      	uxth	r2, r3
 800465a:	89fb      	ldrh	r3, [r7, #14]
 800465c:	4413      	add	r3, r2
 800465e:	b298      	uxth	r0, r3
 8004660:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <DeleteBlock+0x68>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	b29a      	uxth	r2, r3
 8004666:	89bb      	ldrh	r3, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	b299      	uxth	r1, r3
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <DeleteBlock+0x6c>)
 800466e:	4a0b      	ldr	r2, [pc, #44]	; (800469c <DeleteBlock+0x6c>)
 8004670:	f000 f852 	bl	8004718 <DrawBlock>
		for(x=0; x<4; x++)
 8004674:	89fb      	ldrh	r3, [r7, #14]
 8004676:	3301      	adds	r3, #1
 8004678:	81fb      	strh	r3, [r7, #14]
 800467a:	89fb      	ldrh	r3, [r7, #14]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d9e1      	bls.n	8004644 <DeleteBlock+0x14>
	for(y = 0; y<4; y++)
 8004680:	89bb      	ldrh	r3, [r7, #12]
 8004682:	3301      	adds	r3, #1
 8004684:	81bb      	strh	r3, [r7, #12]
 8004686:	89bb      	ldrh	r3, [r7, #12]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d9d8      	bls.n	800463e <DeleteBlock+0xe>
			}
		}
	}
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000e34 	.word	0x20000e34
 8004698:	20000e38 	.word	0x20000e38
 800469c:	ff0000ff 	.word	0xff0000ff

080046a0 <BlockDown>:

int BlockDown(void)
{
 80046a0:	b5b0      	push	{r4, r5, r7, lr}
 80046a2:	af00      	add	r7, sp, #0
	if(!DetectCollision(curPosX, curPosY+1, blockModel[GetCurrentBlockIdx()]))
 80046a4:	4b19      	ldr	r3, [pc, #100]	; (800470c <BlockDown+0x6c>)
 80046a6:	681c      	ldr	r4, [r3, #0]
 80046a8:	4b19      	ldr	r3, [pc, #100]	; (8004710 <BlockDown+0x70>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	1c5d      	adds	r5, r3, #1
 80046ae:	f7ff ff73 	bl	8004598 <GetCurrentBlockIdx>
 80046b2:	4603      	mov	r3, r0
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	4a17      	ldr	r2, [pc, #92]	; (8004714 <BlockDown+0x74>)
 80046b8:	4413      	add	r3, r2
 80046ba:	461a      	mov	r2, r3
 80046bc:	4629      	mov	r1, r5
 80046be:	4620      	mov	r0, r4
 80046c0:	f000 f986 	bl	80049d0 <DetectCollision>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <BlockDown+0x36>
	{
		AddCurrentBlockInfoToBoard();
 80046ca:	f000 f9c1 	bl	8004a50 <AddCurrentBlockInfoToBoard>
		RemoveFillUpLine();
 80046ce:	f000 fa73 	bl	8004bb8 <RemoveFillUpLine>
		return 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e017      	b.n	8004706 <BlockDown+0x66>
	}

	DeleteBlock(blockModel[GetCurrentBlockIdx()]);
 80046d6:	f7ff ff5f 	bl	8004598 <GetCurrentBlockIdx>
 80046da:	4603      	mov	r3, r0
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	4a0d      	ldr	r2, [pc, #52]	; (8004714 <BlockDown+0x74>)
 80046e0:	4413      	add	r3, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff ffa4 	bl	8004630 <DeleteBlock>
	curPosY+=1;
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <BlockDown+0x70>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3301      	adds	r3, #1
 80046ee:	4a08      	ldr	r2, [pc, #32]	; (8004710 <BlockDown+0x70>)
 80046f0:	6013      	str	r3, [r2, #0]

	ShowBlock(blockModel[GetCurrentBlockIdx()]);
 80046f2:	f7ff ff51 	bl	8004598 <GetCurrentBlockIdx>
 80046f6:	4603      	mov	r3, r0
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	4a06      	ldr	r2, [pc, #24]	; (8004714 <BlockDown+0x74>)
 80046fc:	4413      	add	r3, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff ff5a 	bl	80045b8 <ShowBlock>

	return 1;
 8004704:	2301      	movs	r3, #1
}
 8004706:	4618      	mov	r0, r3
 8004708:	bdb0      	pop	{r4, r5, r7, pc}
 800470a:	bf00      	nop
 800470c:	20000e34 	.word	0x20000e34
 8004710:	20000e38 	.word	0x20000e38
 8004714:	20000008 	.word	0x20000008

08004718 <DrawBlock>:

void DrawBlock(uint16_t x, uint16_t y, uint32_t edge_color, uint32_t inner_color)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60ba      	str	r2, [r7, #8]
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	4603      	mov	r3, r0
 8004724:	81fb      	strh	r3, [r7, #14]
 8004726:	460b      	mov	r3, r1
 8004728:	81bb      	strh	r3, [r7, #12]

	BSP_LCD_SetTextColor(edge_color);
 800472a:	68b8      	ldr	r0, [r7, #8]
 800472c:	f001 fab0 	bl	8005c90 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x*10, y*10, 10, 10);
 8004730:	89fb      	ldrh	r3, [r7, #14]
 8004732:	461a      	mov	r2, r3
 8004734:	0092      	lsls	r2, r2, #2
 8004736:	4413      	add	r3, r2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	b298      	uxth	r0, r3
 800473c:	89bb      	ldrh	r3, [r7, #12]
 800473e:	461a      	mov	r2, r3
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	4413      	add	r3, r2
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	b299      	uxth	r1, r3
 8004748:	230a      	movs	r3, #10
 800474a:	220a      	movs	r2, #10
 800474c:	f001 fafa 	bl	8005d44 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(inner_color);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f001 fa9d 	bl	8005c90 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect((x*10)+1, (y*10)+1, 8, 8);
 8004756:	89fb      	ldrh	r3, [r7, #14]
 8004758:	461a      	mov	r2, r3
 800475a:	0092      	lsls	r2, r2, #2
 800475c:	4413      	add	r3, r2
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	b29b      	uxth	r3, r3
 8004762:	3301      	adds	r3, #1
 8004764:	b298      	uxth	r0, r3
 8004766:	89bb      	ldrh	r3, [r7, #12]
 8004768:	461a      	mov	r2, r3
 800476a:	0092      	lsls	r2, r2, #2
 800476c:	4413      	add	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	b29b      	uxth	r3, r3
 8004772:	3301      	adds	r3, #1
 8004774:	b299      	uxth	r1, r3
 8004776:	2308      	movs	r3, #8
 8004778:	2208      	movs	r2, #8
 800477a:	f001 fae3 	bl	8005d44 <BSP_LCD_FillRect>

}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <DrawGameBoard>:

void DrawGameBoard(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
	int x, y;
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800478e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004792:	f001 fa7d 	bl	8005c90 <BSP_LCD_SetTextColor>

	for(y= 0; y<LCD_HEIGHT; y++)
 8004796:	2300      	movs	r3, #0
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	e03d      	b.n	8004818 <DrawGameBoard+0x90>
	{
		for(x=GBOARD_WIDTH+1; x<LCD_WIDTH; x++)
 800479c:	2311      	movs	r3, #17
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	e034      	b.n	800480c <DrawGameBoard+0x84>
		{
			gameBoardInfo[y][0] = 1;
 80047a2:	492f      	ldr	r1, [pc, #188]	; (8004860 <DrawGameBoard+0xd8>)
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	4613      	mov	r3, r2
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4413      	add	r3, r2
 80047ac:	015b      	lsls	r3, r3, #5
 80047ae:	440b      	add	r3, r1
 80047b0:	2201      	movs	r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
			gameBoardInfo[y][x] = 1;
 80047b4:	492a      	ldr	r1, [pc, #168]	; (8004860 <DrawGameBoard+0xd8>)
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	4413      	add	r3, r2
 80047c4:	2201      	movs	r2, #1
 80047c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			BSP_LCD_FillRect(0, y*10, 10, 10);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	0092      	lsls	r2, r2, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	b299      	uxth	r1, r3
 80047d8:	230a      	movs	r3, #10
 80047da:	220a      	movs	r2, #10
 80047dc:	2000      	movs	r0, #0
 80047de:	f001 fab1 	bl	8005d44 <BSP_LCD_FillRect>
			BSP_LCD_FillRect(x*10, y*10, 10, 10);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	0092      	lsls	r2, r2, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	b298      	uxth	r0, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	0092      	lsls	r2, r2, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	b299      	uxth	r1, r3
 80047fe:	230a      	movs	r3, #10
 8004800:	220a      	movs	r2, #10
 8004802:	f001 fa9f 	bl	8005d44 <BSP_LCD_FillRect>
		for(x=GBOARD_WIDTH+1; x<LCD_WIDTH; x++)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3301      	adds	r3, #1
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b17      	cmp	r3, #23
 8004810:	ddc7      	ble.n	80047a2 <DrawGameBoard+0x1a>
	for(y= 0; y<LCD_HEIGHT; y++)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b1f      	cmp	r3, #31
 800481c:	ddbe      	ble.n	800479c <DrawGameBoard+0x14>
		}

	}

	for(x=0; x<LCD_WIDTH; x++)
 800481e:	2300      	movs	r3, #0
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	e016      	b.n	8004852 <DrawGameBoard+0xca>
	{
		gameBoardInfo[GBOARD_HEIGHT][x] = 1;
 8004824:	4a0e      	ldr	r2, [pc, #56]	; (8004860 <DrawGameBoard+0xd8>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800482c:	2101      	movs	r1, #1
 800482e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		BSP_LCD_FillRect(x*10, GBOARD_HEIGHT*10, 10, 10);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	b29b      	uxth	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	0092      	lsls	r2, r2, #2
 800483a:	4413      	add	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	b298      	uxth	r0, r3
 8004840:	230a      	movs	r3, #10
 8004842:	220a      	movs	r2, #10
 8004844:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004848:	f001 fa7c 	bl	8005d44 <BSP_LCD_FillRect>
	for(x=0; x<LCD_WIDTH; x++)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3301      	adds	r3, #1
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b17      	cmp	r3, #23
 8004856:	dde5      	ble.n	8004824 <DrawGameBoard+0x9c>
	}

}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000230 	.word	0x20000230

08004864 <ShiftLeft>:

void ShiftLeft(void)
{
 8004864:	b5b0      	push	{r4, r5, r7, lr}
 8004866:	af00      	add	r7, sp, #0
	if(!DetectCollision(curPosX-1, curPosY, blockModel[GetCurrentBlockIdx()]))
 8004868:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <ShiftLeft+0x60>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	1e5c      	subs	r4, r3, #1
 800486e:	4b16      	ldr	r3, [pc, #88]	; (80048c8 <ShiftLeft+0x64>)
 8004870:	681d      	ldr	r5, [r3, #0]
 8004872:	f7ff fe91 	bl	8004598 <GetCurrentBlockIdx>
 8004876:	4603      	mov	r3, r0
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	4a14      	ldr	r2, [pc, #80]	; (80048cc <ShiftLeft+0x68>)
 800487c:	4413      	add	r3, r2
 800487e:	461a      	mov	r2, r3
 8004880:	4629      	mov	r1, r5
 8004882:	4620      	mov	r0, r4
 8004884:	f000 f8a4 	bl	80049d0 <DetectCollision>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d017      	beq.n	80048be <ShiftLeft+0x5a>
	{
		return;
	}

	DeleteBlock(blockModel[GetCurrentBlockIdx()]);
 800488e:	f7ff fe83 	bl	8004598 <GetCurrentBlockIdx>
 8004892:	4603      	mov	r3, r0
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	4a0d      	ldr	r2, [pc, #52]	; (80048cc <ShiftLeft+0x68>)
 8004898:	4413      	add	r3, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fec8 	bl	8004630 <DeleteBlock>
	curPosX-=1;
 80048a0:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <ShiftLeft+0x60>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	4a07      	ldr	r2, [pc, #28]	; (80048c4 <ShiftLeft+0x60>)
 80048a8:	6013      	str	r3, [r2, #0]

	ShowBlock(blockModel[GetCurrentBlockIdx()]);
 80048aa:	f7ff fe75 	bl	8004598 <GetCurrentBlockIdx>
 80048ae:	4603      	mov	r3, r0
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	4a06      	ldr	r2, [pc, #24]	; (80048cc <ShiftLeft+0x68>)
 80048b4:	4413      	add	r3, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fe7e 	bl	80045b8 <ShowBlock>
 80048bc:	e000      	b.n	80048c0 <ShiftLeft+0x5c>
		return;
 80048be:	bf00      	nop
}
 80048c0:	bdb0      	pop	{r4, r5, r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000e34 	.word	0x20000e34
 80048c8:	20000e38 	.word	0x20000e38
 80048cc:	20000008 	.word	0x20000008

080048d0 <ShiftRight>:

void ShiftRight(void)
{
 80048d0:	b5b0      	push	{r4, r5, r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	if(!DetectCollision(curPosX+1, curPosY, blockModel[GetCurrentBlockIdx()]))
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <ShiftRight+0x60>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1c5c      	adds	r4, r3, #1
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <ShiftRight+0x64>)
 80048dc:	681d      	ldr	r5, [r3, #0]
 80048de:	f7ff fe5b 	bl	8004598 <GetCurrentBlockIdx>
 80048e2:	4603      	mov	r3, r0
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	4a14      	ldr	r2, [pc, #80]	; (8004938 <ShiftRight+0x68>)
 80048e8:	4413      	add	r3, r2
 80048ea:	461a      	mov	r2, r3
 80048ec:	4629      	mov	r1, r5
 80048ee:	4620      	mov	r0, r4
 80048f0:	f000 f86e 	bl	80049d0 <DetectCollision>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d017      	beq.n	800492a <ShiftRight+0x5a>
	{
		return;
	}

	DeleteBlock(blockModel[GetCurrentBlockIdx()]);
 80048fa:	f7ff fe4d 	bl	8004598 <GetCurrentBlockIdx>
 80048fe:	4603      	mov	r3, r0
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	4a0d      	ldr	r2, [pc, #52]	; (8004938 <ShiftRight+0x68>)
 8004904:	4413      	add	r3, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fe92 	bl	8004630 <DeleteBlock>
	curPosX+=1;
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <ShiftRight+0x60>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	4a07      	ldr	r2, [pc, #28]	; (8004930 <ShiftRight+0x60>)
 8004914:	6013      	str	r3, [r2, #0]

	ShowBlock(blockModel[GetCurrentBlockIdx()]);
 8004916:	f7ff fe3f 	bl	8004598 <GetCurrentBlockIdx>
 800491a:	4603      	mov	r3, r0
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	4a06      	ldr	r2, [pc, #24]	; (8004938 <ShiftRight+0x68>)
 8004920:	4413      	add	r3, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fe48 	bl	80045b8 <ShowBlock>
 8004928:	e000      	b.n	800492c <ShiftRight+0x5c>
		return;
 800492a:	bf00      	nop
}
 800492c:	bdb0      	pop	{r4, r5, r7, pc}
 800492e:	bf00      	nop
 8004930:	20000e34 	.word	0x20000e34
 8004934:	20000e38 	.word	0x20000e38
 8004938:	20000008 	.word	0x20000008

0800493c <RotateBlock>:

void RotateBlock(void)
{
 800493c:	b5b0      	push	{r4, r5, r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
	int nextRotSte;
	int beforeRotSte=rotateSte;
 8004942:	4b1f      	ldr	r3, [pc, #124]	; (80049c0 <RotateBlock+0x84>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	607b      	str	r3, [r7, #4]

	DeleteBlock(blockModel[GetCurrentBlockIdx()]);
 8004948:	f7ff fe26 	bl	8004598 <GetCurrentBlockIdx>
 800494c:	4603      	mov	r3, r0
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <RotateBlock+0x88>)
 8004952:	4413      	add	r3, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff fe6b 	bl	8004630 <DeleteBlock>

	nextRotSte = rotateSte + 1;
 800495a:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <RotateBlock+0x84>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	603b      	str	r3, [r7, #0]
	nextRotSte %= 4;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	425a      	negs	r2, r3
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	f002 0203 	and.w	r2, r2, #3
 800496e:	bf58      	it	pl
 8004970:	4253      	negpl	r3, r2
 8004972:	603b      	str	r3, [r7, #0]
	rotateSte = nextRotSte;
 8004974:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <RotateBlock+0x84>)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6013      	str	r3, [r2, #0]

	if(!DetectCollision(curPosX, curPosY, blockModel[GetCurrentBlockIdx()]))
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <RotateBlock+0x8c>)
 800497c:	681c      	ldr	r4, [r3, #0]
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <RotateBlock+0x90>)
 8004980:	681d      	ldr	r5, [r3, #0]
 8004982:	f7ff fe09 	bl	8004598 <GetCurrentBlockIdx>
 8004986:	4603      	mov	r3, r0
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	4a0e      	ldr	r2, [pc, #56]	; (80049c4 <RotateBlock+0x88>)
 800498c:	4413      	add	r3, r2
 800498e:	461a      	mov	r2, r3
 8004990:	4629      	mov	r1, r5
 8004992:	4620      	mov	r0, r4
 8004994:	f000 f81c 	bl	80049d0 <DetectCollision>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d103      	bne.n	80049a6 <RotateBlock+0x6a>
	{
		rotateSte=beforeRotSte;
 800499e:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <RotateBlock+0x84>)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6013      	str	r3, [r2, #0]
		return;
 80049a4:	e008      	b.n	80049b8 <RotateBlock+0x7c>
	}

	ShowBlock(blockModel[GetCurrentBlockIdx()]);
 80049a6:	f7ff fdf7 	bl	8004598 <GetCurrentBlockIdx>
 80049aa:	4603      	mov	r3, r0
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <RotateBlock+0x88>)
 80049b0:	4413      	add	r3, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fe00 	bl	80045b8 <ShowBlock>

}
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bdb0      	pop	{r4, r5, r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000e3c 	.word	0x20000e3c
 80049c4:	20000008 	.word	0x20000008
 80049c8:	20000e34 	.word	0x20000e34
 80049cc:	20000e38 	.word	0x20000e38

080049d0 <DetectCollision>:

int DetectCollision(int posX, int posY, char blockModel[][4])
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
	int x, y;

	int arrX = posX;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	617b      	str	r3, [r7, #20]
	int arrY = posY;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	613b      	str	r3, [r7, #16]

	for(x=0; x<4; x++)
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	e026      	b.n	8004a38 <DetectCollision+0x68>
	{
		for(y=0; y<4; y++)
 80049ea:	2300      	movs	r3, #0
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	e01d      	b.n	8004a2c <DetectCollision+0x5c>
		{
			if(blockModel[y][x] == 1 && gameBoardInfo[arrY+y][arrX+x] == 1)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	441a      	add	r2, r3
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d111      	bne.n	8004a26 <DetectCollision+0x56>
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	441a      	add	r2, r3
 8004a08:	6979      	ldr	r1, [r7, #20]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4419      	add	r1, r3
 8004a0e:	480f      	ldr	r0, [pc, #60]	; (8004a4c <DetectCollision+0x7c>)
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	440b      	add	r3, r1
 8004a1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <DetectCollision+0x56>
			{
				return 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e00c      	b.n	8004a40 <DetectCollision+0x70>
		for(y=0; y<4; y++)
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	ddde      	ble.n	80049f0 <DetectCollision+0x20>
	for(x=0; x<4; x++)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	ddd5      	ble.n	80049ea <DetectCollision+0x1a>
			}

		}
	}
	return 1;
 8004a3e:	2301      	movs	r3, #1
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3724      	adds	r7, #36	; 0x24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20000230 	.word	0x20000230

08004a50 <AddCurrentBlockInfoToBoard>:

void AddCurrentBlockInfoToBoard(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
	int x, y;

	int arrCurX;
	int arrCurY;

	for(y=0; y<4; y++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	e02e      	b.n	8004aba <AddCurrentBlockInfoToBoard+0x6a>
	{
		for(x=0; x<4; x++)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	e025      	b.n	8004aae <AddCurrentBlockInfoToBoard+0x5e>
		{

			arrCurX = curPosX;
 8004a62:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <AddCurrentBlockInfoToBoard+0x78>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	607b      	str	r3, [r7, #4]
			arrCurY = curPosY;
 8004a68:	4b18      	ldr	r3, [pc, #96]	; (8004acc <AddCurrentBlockInfoToBoard+0x7c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	603b      	str	r3, [r7, #0]

			if(blockModel[GetCurrentBlockIdx()][y][x] == 1)
 8004a6e:	f7ff fd93 	bl	8004598 <GetCurrentBlockIdx>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4916      	ldr	r1, [pc, #88]	; (8004ad0 <AddCurrentBlockInfoToBoard+0x80>)
 8004a76:	009a      	lsls	r2, r3, #2
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	18ca      	adds	r2, r1, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d10e      	bne.n	8004aa8 <AddCurrentBlockInfoToBoard+0x58>
			{
				gameBoardInfo[arrCurY+y][arrCurX+x] = 1;
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	441a      	add	r2, r3
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4419      	add	r1, r3
 8004a96:	480f      	ldr	r0, [pc, #60]	; (8004ad4 <AddCurrentBlockInfoToBoard+0x84>)
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(x=0; x<4; x++)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	ddd6      	ble.n	8004a62 <AddCurrentBlockInfoToBoard+0x12>
	for(y=0; y<4; y++)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	ddcd      	ble.n	8004a5c <AddCurrentBlockInfoToBoard+0xc>
			}
		}
	}
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000e34 	.word	0x20000e34
 8004acc:	20000e38 	.word	0x20000e38
 8004ad0:	20000008 	.word	0x20000008
 8004ad4:	20000230 	.word	0x20000230

08004ad8 <DrawSolidBlocks>:
		return 0;
	}
}

void DrawSolidBlocks(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
	int x, y;

	for(y=0; y<GBOARD_HEIGHT; y++)
 8004ade:	2300      	movs	r3, #0
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	e05b      	b.n	8004b9c <DrawSolidBlocks+0xc4>
	{
		for(x=1; x<GBOARD_WIDTH+1; x++)
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	e052      	b.n	8004b90 <DrawSolidBlocks+0xb8>
		{
			BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8004aea:	4830      	ldr	r0, [pc, #192]	; (8004bac <DrawSolidBlocks+0xd4>)
 8004aec:	f001 f8d0 	bl	8005c90 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(x*10, y*10, 10, 10);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	0092      	lsls	r2, r2, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	b298      	uxth	r0, r3
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	0092      	lsls	r2, r2, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	b299      	uxth	r1, r3
 8004b0c:	230a      	movs	r3, #10
 8004b0e:	220a      	movs	r2, #10
 8004b10:	f001 f918 	bl	8005d44 <BSP_LCD_FillRect>

			if(gameBoardInfo[y][x] == 1)
 8004b14:	4926      	ldr	r1, [pc, #152]	; (8004bb0 <DrawSolidBlocks+0xd8>)
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	4413      	add	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d12e      	bne.n	8004b8a <DrawSolidBlocks+0xb2>
			{
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	f001 f8ae 	bl	8005c90 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(x*10, y*10, 10, 10);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	b298      	uxth	r0, r3
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	0092      	lsls	r2, r2, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	b299      	uxth	r1, r3
 8004b50:	230a      	movs	r3, #10
 8004b52:	220a      	movs	r2, #10
 8004b54:	f001 f8f6 	bl	8005d44 <BSP_LCD_FillRect>
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8004b58:	4816      	ldr	r0, [pc, #88]	; (8004bb4 <DrawSolidBlocks+0xdc>)
 8004b5a:	f001 f899 	bl	8005c90 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(x*10+1, y*10+1, 8, 8);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	0092      	lsls	r2, r2, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	b298      	uxth	r0, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	0092      	lsls	r2, r2, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	b299      	uxth	r1, r3
 8004b82:	2308      	movs	r3, #8
 8004b84:	2208      	movs	r2, #8
 8004b86:	f001 f8dd 	bl	8005d44 <BSP_LCD_FillRect>
		for(x=1; x<GBOARD_WIDTH+1; x++)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	dda9      	ble.n	8004aea <DrawSolidBlocks+0x12>
	for(y=0; y<GBOARD_HEIGHT; y++)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b1e      	cmp	r3, #30
 8004ba0:	dda0      	ble.n	8004ae4 <DrawSolidBlocks+0xc>
			}
		}
	}
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	ff0000ff 	.word	0xff0000ff
 8004bb0:	20000230 	.word	0x20000230
 8004bb4:	ffff0000 	.word	0xffff0000

08004bb8 <RemoveFillUpLine>:

void RemoveFillUpLine(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
	int x, y;
	int line;

	for(y=GBOARD_HEIGHT-1; y>0; y--)
 8004bbe:	231e      	movs	r3, #30
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	e061      	b.n	8004c88 <RemoveFillUpLine+0xd0>
	{
		for(x=1; x<GBOARD_WIDTH+1; x++)
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e00e      	b.n	8004be8 <RemoveFillUpLine+0x30>
		{
			if(gameBoardInfo[y][x]!=1)
 8004bca:	4934      	ldr	r1, [pc, #208]	; (8004c9c <RemoveFillUpLine+0xe4>)
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d106      	bne.n	8004bf0 <RemoveFillUpLine+0x38>
		for(x=1; x<GBOARD_WIDTH+1; x++)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3301      	adds	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	dded      	ble.n	8004bca <RemoveFillUpLine+0x12>
 8004bee:	e000      	b.n	8004bf2 <RemoveFillUpLine+0x3a>
				break;
 8004bf0:	bf00      	nop
		}
		if(x == (GBOARD_WIDTH+1))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b11      	cmp	r3, #17
 8004bf6:	d144      	bne.n	8004c82 <RemoveFillUpLine+0xca>
		{
			for(line = 0; y-line > 0; line++)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	607b      	str	r3, [r7, #4]
 8004bfc:	e039      	b.n	8004c72 <RemoveFillUpLine+0xba>
			{
				for(x=1; x<GBOARD_WIDTH+1; x++)
 8004bfe:	2301      	movs	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e030      	b.n	8004c66 <RemoveFillUpLine+0xae>
				{
					gameBoardInfo[y-line][x] = gameBoardInfo[y-line-1][x];
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	1e59      	subs	r1, r3, #1
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	1ad2      	subs	r2, r2, r3
 8004c12:	4822      	ldr	r0, [pc, #136]	; (8004c9c <RemoveFillUpLine+0xe4>)
 8004c14:	460b      	mov	r3, r1
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	440b      	add	r3, r1
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	68f9      	ldr	r1, [r7, #12]
 8004c1e:	440b      	add	r3, r1
 8004c20:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8004c24:	481d      	ldr	r0, [pc, #116]	; (8004c9c <RemoveFillUpLine+0xe4>)
 8004c26:	4613      	mov	r3, r2
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	4413      	add	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8004c36:	481a      	ldr	r0, [pc, #104]	; (8004ca0 <RemoveFillUpLine+0xe8>)
 8004c38:	f001 f82a 	bl	8005c90 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(x*10, y*10, 10, 10);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	0092      	lsls	r2, r2, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	b298      	uxth	r0, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	0092      	lsls	r2, r2, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	b299      	uxth	r1, r3
 8004c58:	230a      	movs	r3, #10
 8004c5a:	220a      	movs	r2, #10
 8004c5c:	f001 f872 	bl	8005d44 <BSP_LCD_FillRect>
				for(x=1; x<GBOARD_WIDTH+1; x++)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	ddcb      	ble.n	8004c04 <RemoveFillUpLine+0x4c>
			for(line = 0; y-line > 0; line++)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	dcc0      	bgt.n	8004bfe <RemoveFillUpLine+0x46>
				}
			}
			y++;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60bb      	str	r3, [r7, #8]
	for(y=GBOARD_HEIGHT-1; y>0; y--)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	60bb      	str	r3, [r7, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	dc9a      	bgt.n	8004bc4 <RemoveFillUpLine+0xc>
		}
	}
	DrawSolidBlocks();
 8004c8e:	f7ff ff23 	bl	8004ad8 <DrawSolidBlocks>
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000230 	.word	0x20000230
 8004ca0:	ff0000ff 	.word	0xff0000ff

08004ca4 <SolidCurrentBlock>:


void SolidCurrentBlock(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
	while(BlockDown());
 8004ca8:	bf00      	nop
 8004caa:	f7ff fcf9 	bl	80046a0 <BlockDown>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1fa      	bne.n	8004caa <SolidCurrentBlock+0x6>
}
 8004cb4:	bf00      	nop
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8004cbc:	f000 fdf8 	bl	80058b0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8004cc0:	20ca      	movs	r0, #202	; 0xca
 8004cc2:	f000 f95d 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8004cc6:	20c3      	movs	r0, #195	; 0xc3
 8004cc8:	f000 f967 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8004ccc:	2008      	movs	r0, #8
 8004cce:	f000 f964 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8004cd2:	2050      	movs	r0, #80	; 0x50
 8004cd4:	f000 f961 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8004cd8:	20cf      	movs	r0, #207	; 0xcf
 8004cda:	f000 f951 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f000 f95b 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8004ce4:	20c1      	movs	r0, #193	; 0xc1
 8004ce6:	f000 f958 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8004cea:	2030      	movs	r0, #48	; 0x30
 8004cec:	f000 f955 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8004cf0:	20ed      	movs	r0, #237	; 0xed
 8004cf2:	f000 f945 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8004cf6:	2064      	movs	r0, #100	; 0x64
 8004cf8:	f000 f94f 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8004cfc:	2003      	movs	r0, #3
 8004cfe:	f000 f94c 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8004d02:	2012      	movs	r0, #18
 8004d04:	f000 f949 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8004d08:	2081      	movs	r0, #129	; 0x81
 8004d0a:	f000 f946 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8004d0e:	20e8      	movs	r0, #232	; 0xe8
 8004d10:	f000 f936 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8004d14:	2085      	movs	r0, #133	; 0x85
 8004d16:	f000 f940 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f000 f93d 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8004d20:	2078      	movs	r0, #120	; 0x78
 8004d22:	f000 f93a 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8004d26:	20cb      	movs	r0, #203	; 0xcb
 8004d28:	f000 f92a 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8004d2c:	2039      	movs	r0, #57	; 0x39
 8004d2e:	f000 f934 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8004d32:	202c      	movs	r0, #44	; 0x2c
 8004d34:	f000 f931 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f000 f92e 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8004d3e:	2034      	movs	r0, #52	; 0x34
 8004d40:	f000 f92b 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8004d44:	2002      	movs	r0, #2
 8004d46:	f000 f928 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8004d4a:	20f7      	movs	r0, #247	; 0xf7
 8004d4c:	f000 f918 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8004d50:	2020      	movs	r0, #32
 8004d52:	f000 f922 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8004d56:	20ea      	movs	r0, #234	; 0xea
 8004d58:	f000 f912 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f000 f91c 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004d62:	2000      	movs	r0, #0
 8004d64:	f000 f919 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8004d68:	20b1      	movs	r0, #177	; 0xb1
 8004d6a:	f000 f909 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f000 f913 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8004d74:	201b      	movs	r0, #27
 8004d76:	f000 f910 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8004d7a:	20b6      	movs	r0, #182	; 0xb6
 8004d7c:	f000 f900 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8004d80:	200a      	movs	r0, #10
 8004d82:	f000 f90a 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8004d86:	20a2      	movs	r0, #162	; 0xa2
 8004d88:	f000 f907 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8004d8c:	20c0      	movs	r0, #192	; 0xc0
 8004d8e:	f000 f8f7 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8004d92:	2010      	movs	r0, #16
 8004d94:	f000 f901 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8004d98:	20c1      	movs	r0, #193	; 0xc1
 8004d9a:	f000 f8f1 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8004d9e:	2010      	movs	r0, #16
 8004da0:	f000 f8fb 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8004da4:	20c5      	movs	r0, #197	; 0xc5
 8004da6:	f000 f8eb 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8004daa:	2045      	movs	r0, #69	; 0x45
 8004dac:	f000 f8f5 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8004db0:	2015      	movs	r0, #21
 8004db2:	f000 f8f2 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8004db6:	20c7      	movs	r0, #199	; 0xc7
 8004db8:	f000 f8e2 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8004dbc:	2090      	movs	r0, #144	; 0x90
 8004dbe:	f000 f8ec 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8004dc2:	2036      	movs	r0, #54	; 0x36
 8004dc4:	f000 f8dc 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8004dc8:	20c8      	movs	r0, #200	; 0xc8
 8004dca:	f000 f8e6 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8004dce:	20f2      	movs	r0, #242	; 0xf2
 8004dd0:	f000 f8d6 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f000 f8e0 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8004dda:	20b0      	movs	r0, #176	; 0xb0
 8004ddc:	f000 f8d0 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8004de0:	20c2      	movs	r0, #194	; 0xc2
 8004de2:	f000 f8da 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8004de6:	20b6      	movs	r0, #182	; 0xb6
 8004de8:	f000 f8ca 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8004dec:	200a      	movs	r0, #10
 8004dee:	f000 f8d4 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8004df2:	20a7      	movs	r0, #167	; 0xa7
 8004df4:	f000 f8d1 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8004df8:	2027      	movs	r0, #39	; 0x27
 8004dfa:	f000 f8ce 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8004dfe:	2004      	movs	r0, #4
 8004e00:	f000 f8cb 	bl	8004f9a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8004e04:	202a      	movs	r0, #42	; 0x2a
 8004e06:	f000 f8bb 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f000 f8c5 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004e10:	2000      	movs	r0, #0
 8004e12:	f000 f8c2 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004e16:	2000      	movs	r0, #0
 8004e18:	f000 f8bf 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8004e1c:	20ef      	movs	r0, #239	; 0xef
 8004e1e:	f000 f8bc 	bl	8004f9a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8004e22:	202b      	movs	r0, #43	; 0x2b
 8004e24:	f000 f8ac 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004e28:	2000      	movs	r0, #0
 8004e2a:	f000 f8b6 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f000 f8b3 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8004e34:	2001      	movs	r0, #1
 8004e36:	f000 f8b0 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8004e3a:	203f      	movs	r0, #63	; 0x3f
 8004e3c:	f000 f8ad 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8004e40:	20f6      	movs	r0, #246	; 0xf6
 8004e42:	f000 f89d 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8004e46:	2001      	movs	r0, #1
 8004e48:	f000 f8a7 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f000 f8a4 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8004e52:	2006      	movs	r0, #6
 8004e54:	f000 f8a1 	bl	8004f9a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8004e58:	202c      	movs	r0, #44	; 0x2c
 8004e5a:	f000 f891 	bl	8004f80 <ili9341_WriteReg>
  LCD_Delay(200);
 8004e5e:	20c8      	movs	r0, #200	; 0xc8
 8004e60:	f000 fe14 	bl	8005a8c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8004e64:	2026      	movs	r0, #38	; 0x26
 8004e66:	f000 f88b 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	f000 f895 	bl	8004f9a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8004e70:	20e0      	movs	r0, #224	; 0xe0
 8004e72:	f000 f885 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8004e76:	200f      	movs	r0, #15
 8004e78:	f000 f88f 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8004e7c:	2029      	movs	r0, #41	; 0x29
 8004e7e:	f000 f88c 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8004e82:	2024      	movs	r0, #36	; 0x24
 8004e84:	f000 f889 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8004e88:	200c      	movs	r0, #12
 8004e8a:	f000 f886 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8004e8e:	200e      	movs	r0, #14
 8004e90:	f000 f883 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8004e94:	2009      	movs	r0, #9
 8004e96:	f000 f880 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8004e9a:	204e      	movs	r0, #78	; 0x4e
 8004e9c:	f000 f87d 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8004ea0:	2078      	movs	r0, #120	; 0x78
 8004ea2:	f000 f87a 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8004ea6:	203c      	movs	r0, #60	; 0x3c
 8004ea8:	f000 f877 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8004eac:	2009      	movs	r0, #9
 8004eae:	f000 f874 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8004eb2:	2013      	movs	r0, #19
 8004eb4:	f000 f871 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8004eb8:	2005      	movs	r0, #5
 8004eba:	f000 f86e 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8004ebe:	2017      	movs	r0, #23
 8004ec0:	f000 f86b 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8004ec4:	2011      	movs	r0, #17
 8004ec6:	f000 f868 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f000 f865 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8004ed0:	20e1      	movs	r0, #225	; 0xe1
 8004ed2:	f000 f855 	bl	8004f80 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f000 f85f 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8004edc:	2016      	movs	r0, #22
 8004ede:	f000 f85c 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8004ee2:	201b      	movs	r0, #27
 8004ee4:	f000 f859 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8004ee8:	2004      	movs	r0, #4
 8004eea:	f000 f856 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8004eee:	2011      	movs	r0, #17
 8004ef0:	f000 f853 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8004ef4:	2007      	movs	r0, #7
 8004ef6:	f000 f850 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8004efa:	2031      	movs	r0, #49	; 0x31
 8004efc:	f000 f84d 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8004f00:	2033      	movs	r0, #51	; 0x33
 8004f02:	f000 f84a 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8004f06:	2042      	movs	r0, #66	; 0x42
 8004f08:	f000 f847 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8004f0c:	2005      	movs	r0, #5
 8004f0e:	f000 f844 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8004f12:	200c      	movs	r0, #12
 8004f14:	f000 f841 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8004f18:	200a      	movs	r0, #10
 8004f1a:	f000 f83e 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8004f1e:	2028      	movs	r0, #40	; 0x28
 8004f20:	f000 f83b 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8004f24:	202f      	movs	r0, #47	; 0x2f
 8004f26:	f000 f838 	bl	8004f9a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8004f2a:	200f      	movs	r0, #15
 8004f2c:	f000 f835 	bl	8004f9a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8004f30:	2011      	movs	r0, #17
 8004f32:	f000 f825 	bl	8004f80 <ili9341_WriteReg>
  LCD_Delay(200);
 8004f36:	20c8      	movs	r0, #200	; 0xc8
 8004f38:	f000 fda8 	bl	8005a8c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8004f3c:	2029      	movs	r0, #41	; 0x29
 8004f3e:	f000 f81f 	bl	8004f80 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8004f42:	202c      	movs	r0, #44	; 0x2c
 8004f44:	f000 f81c 	bl	8004f80 <ili9341_WriteReg>
}
 8004f48:	bf00      	nop
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8004f50:	f000 fcae 	bl	80058b0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8004f54:	2103      	movs	r1, #3
 8004f56:	20d3      	movs	r0, #211	; 0xd3
 8004f58:	f000 f82c 	bl	8004fb4 <ili9341_ReadData>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	b29b      	uxth	r3, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8004f68:	2029      	movs	r0, #41	; 0x29
 8004f6a:	f000 f809 	bl	8004f80 <ili9341_WriteReg>
}
 8004f6e:	bf00      	nop
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8004f76:	2028      	movs	r0, #40	; 0x28
 8004f78:	f000 f802 	bl	8004f80 <ili9341_WriteReg>
}
 8004f7c:	bf00      	nop
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fd29 	bl	80059e4 <LCD_IO_WriteReg>
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fcfa 	bl	80059a0 <LCD_IO_WriteData>
}
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	460a      	mov	r2, r1
 8004fbe:	80fb      	strh	r3, [r7, #6]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8004fc4:	797a      	ldrb	r2, [r7, #5]
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	4611      	mov	r1, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fd2c 	bl	8005a28 <LCD_IO_ReadData>
 8004fd0:	4603      	mov	r3, r0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8004fde:	23f0      	movs	r3, #240	; 0xf0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8004fee:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_UART_RxCpltCallback>:

uint8_t u8ReceiveData;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	switch(u8ReceiveData)
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <HAL_UART_RxCpltCallback+0x58>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b4c      	cmp	r3, #76	; 0x4c
 800500a:	d011      	beq.n	8005030 <HAL_UART_RxCpltCallback+0x34>
 800500c:	2b4c      	cmp	r3, #76	; 0x4c
 800500e:	dc06      	bgt.n	800501e <HAL_UART_RxCpltCallback+0x22>
 8005010:	2b4a      	cmp	r3, #74	; 0x4a
 8005012:	d00a      	beq.n	800502a <HAL_UART_RxCpltCallback+0x2e>
 8005014:	2b4a      	cmp	r3, #74	; 0x4a
 8005016:	dc0e      	bgt.n	8005036 <HAL_UART_RxCpltCallback+0x3a>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d00f      	beq.n	800503c <HAL_UART_RxCpltCallback+0x40>
 800501c:	e010      	b.n	8005040 <HAL_UART_RxCpltCallback+0x44>
 800501e:	2b6b      	cmp	r3, #107	; 0x6b
 8005020:	d009      	beq.n	8005036 <HAL_UART_RxCpltCallback+0x3a>
 8005022:	2b6c      	cmp	r3, #108	; 0x6c
 8005024:	d004      	beq.n	8005030 <HAL_UART_RxCpltCallback+0x34>
 8005026:	2b6a      	cmp	r3, #106	; 0x6a
 8005028:	d10a      	bne.n	8005040 <HAL_UART_RxCpltCallback+0x44>
	{
	case 'j' :
	case 'J' :
		ShiftLeft();
 800502a:	f7ff fc1b 	bl	8004864 <ShiftLeft>
		break;
 800502e:	e007      	b.n	8005040 <HAL_UART_RxCpltCallback+0x44>
	case 'l' :
	case 'L' :
		ShiftRight();
 8005030:	f7ff fc4e 	bl	80048d0 <ShiftRight>
		break;
 8005034:	e004      	b.n	8005040 <HAL_UART_RxCpltCallback+0x44>
	case 'k' :
	case 'K' :
		RotateBlock();
 8005036:	f7ff fc81 	bl	800493c <RotateBlock>
		break;
 800503a:	e001      	b.n	8005040 <HAL_UART_RxCpltCallback+0x44>
	case ' ' :
		SolidCurrentBlock();
 800503c:	f7ff fe32 	bl	8004ca4 <SolidCurrentBlock>
	}
	HAL_UART_Receive_IT(&huart1, &u8ReceiveData, 1);
 8005040:	2201      	movs	r2, #1
 8005042:	4904      	ldr	r1, [pc, #16]	; (8005054 <HAL_UART_RxCpltCallback+0x58>)
 8005044:	4804      	ldr	r0, [pc, #16]	; (8005058 <HAL_UART_RxCpltCallback+0x5c>)
 8005046:	f7fe fc96 	bl	8003976 <HAL_UART_Receive_IT>
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20001198 	.word	0x20001198
 8005058:	20001148 	.word	0x20001148

0800505c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005060:	f7fb fa44 	bl	80004ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005064:	f000 f840 	bl	80050e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005068:	f000 faae 	bl	80055c8 <MX_GPIO_Init>
  MX_FMC_Init();
 800506c:	f000 fa5e 	bl	800552c <MX_FMC_Init>
  MX_LTDC_Init();
 8005070:	f000 f936 	bl	80052e0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8005074:	f000 f9fa 	bl	800546c <MX_SPI5_Init>
  MX_I2C3_Init();
 8005078:	f000 f8f2 	bl	8005260 <MX_I2C3_Init>
  MX_DMA2D_Init();
 800507c:	f000 f8be 	bl	80051fc <MX_DMA2D_Init>
  MX_RNG_Init();
 8005080:	f000 f9e0 	bl	8005444 <MX_RNG_Init>
  MX_USART1_UART_Init();
 8005084:	f000 fa28 	bl	80054d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &u8ReceiveData, 1);
 8005088:	2201      	movs	r2, #1
 800508a:	4914      	ldr	r1, [pc, #80]	; (80050dc <main+0x80>)
 800508c:	4814      	ldr	r0, [pc, #80]	; (80050e0 <main+0x84>)
 800508e:	f7fe fc72 	bl	8003976 <HAL_UART_Receive_IT>


  BSP_LCD_Init();
 8005092:	f000 fd07 	bl	8005aa4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);			// HAL LTDC.h Layer 1, Discovery lcd.h LCD_FRAME_BUFFER
 8005096:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800509a:	2001      	movs	r0, #1
 800509c:	f000 fd84 	bl	8005ba8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80050a0:	2001      	movs	r0, #1
 80050a2:	f000 fde5 	bl	8005c70 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80050a6:	480f      	ldr	r0, [pc, #60]	; (80050e4 <main+0x88>)
 80050a8:	f000 fe24 	bl	8005cf4 <BSP_LCD_Clear>
  DrawGameBoard();
 80050ac:	f7ff fb6c 	bl	8004788 <DrawGameBoard>

  HAL_Delay(500);
 80050b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050b4:	f7fb fa8c 	bl	80005d0 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  InitNewBlockPos(8, 0);
 80050b8:	2100      	movs	r1, #0
 80050ba:	2008      	movs	r0, #8
 80050bc:	f7ff fa2e 	bl	800451c <InitNewBlockPos>
	  ChooseBlock();
 80050c0:	f7ff fa48 	bl	8004554 <ChooseBlock>

//	  if(IsGameOver()) break;

	  while(1)
	  {
		  if(BlockDown() == 0)
 80050c4:	f7ff faec 	bl	80046a0 <BlockDown>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <main+0x7c>
		  {
			  break;
		  }
		  HAL_Delay(SYS_DELAY);
 80050ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80050d2:	f7fb fa7d 	bl	80005d0 <HAL_Delay>
		  if(BlockDown() == 0)
 80050d6:	e7f5      	b.n	80050c4 <main+0x68>
			  break;
 80050d8:	bf00      	nop
	  InitNewBlockPos(8, 0);
 80050da:	e7ed      	b.n	80050b8 <main+0x5c>
 80050dc:	20001198 	.word	0x20001198
 80050e0:	20001148 	.word	0x20001148
 80050e4:	ff0000ff 	.word	0xff0000ff

080050e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b0a0      	sub	sp, #128	; 0x80
 80050ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80050f2:	2230      	movs	r2, #48	; 0x30
 80050f4:	2100      	movs	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 fd48 	bl	8006b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800510c:	f107 030c 	add.w	r3, r7, #12
 8005110:	2230      	movs	r2, #48	; 0x30
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f001 fd39 	bl	8006b8c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	4b35      	ldr	r3, [pc, #212]	; (80051f4 <SystemClock_Config+0x10c>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	4a34      	ldr	r2, [pc, #208]	; (80051f4 <SystemClock_Config+0x10c>)
 8005124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005128:	6413      	str	r3, [r2, #64]	; 0x40
 800512a:	4b32      	ldr	r3, [pc, #200]	; (80051f4 <SystemClock_Config+0x10c>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	4b2f      	ldr	r3, [pc, #188]	; (80051f8 <SystemClock_Config+0x110>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2e      	ldr	r2, [pc, #184]	; (80051f8 <SystemClock_Config+0x110>)
 8005140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <SystemClock_Config+0x110>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800514e:	607b      	str	r3, [r7, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005152:	2301      	movs	r3, #1
 8005154:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800515a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800515c:	2302      	movs	r3, #2
 800515e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005160:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005164:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005166:	2304      	movs	r3, #4
 8005168:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800516a:	23b4      	movs	r3, #180	; 0xb4
 800516c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800516e:	2302      	movs	r3, #2
 8005170:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005172:	2308      	movs	r3, #8
 8005174:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005176:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800517a:	4618      	mov	r0, r3
 800517c:	f7fc ff58 	bl	8002030 <HAL_RCC_OscConfig>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005186:	f000 facd 	bl	8005724 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800518a:	f7fc ff01 	bl	8001f90 <HAL_PWREx_EnableOverDrive>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005194:	f000 fac6 	bl	8005724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005198:	230f      	movs	r3, #15
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800519c:	2302      	movs	r3, #2
 800519e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051a0:	2300      	movs	r3, #0
 80051a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80051a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80051a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80051aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80051b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051b4:	2105      	movs	r1, #5
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fd f97c 	bl	80024b4 <HAL_RCC_ClockConfig>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80051c2:	f000 faaf 	bl	8005724 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80051c6:	2308      	movs	r3, #8
 80051c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80051ca:	2332      	movs	r3, #50	; 0x32
 80051cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80051ce:	2302      	movs	r3, #2
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80051d2:	2300      	movs	r3, #0
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fd fb58 	bl	8002890 <HAL_RCCEx_PeriphCLKConfig>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <SystemClock_Config+0x102>
  {
    Error_Handler();
 80051e6:	f000 fa9d 	bl	8005724 <Error_Handler>
  }
}
 80051ea:	bf00      	nop
 80051ec:	3780      	adds	r7, #128	; 0x80
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40007000 	.word	0x40007000

080051fc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8005200:	4b15      	ldr	r3, [pc, #84]	; (8005258 <MX_DMA2D_Init+0x5c>)
 8005202:	4a16      	ldr	r2, [pc, #88]	; (800525c <MX_DMA2D_Init+0x60>)
 8005204:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8005206:	4b14      	ldr	r3, [pc, #80]	; (8005258 <MX_DMA2D_Init+0x5c>)
 8005208:	2200      	movs	r2, #0
 800520a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800520c:	4b12      	ldr	r3, [pc, #72]	; (8005258 <MX_DMA2D_Init+0x5c>)
 800520e:	2200      	movs	r2, #0
 8005210:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <MX_DMA2D_Init+0x5c>)
 8005214:	2200      	movs	r2, #0
 8005216:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <MX_DMA2D_Init+0x5c>)
 800521a:	2200      	movs	r2, #0
 800521c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800521e:	4b0e      	ldr	r3, [pc, #56]	; (8005258 <MX_DMA2D_Init+0x5c>)
 8005220:	2200      	movs	r2, #0
 8005222:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <MX_DMA2D_Init+0x5c>)
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <MX_DMA2D_Init+0x5c>)
 800522c:	2200      	movs	r2, #0
 800522e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005230:	4809      	ldr	r0, [pc, #36]	; (8005258 <MX_DMA2D_Init+0x5c>)
 8005232:	f7fb fcdf 	bl	8000bf4 <HAL_DMA2D_Init>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800523c:	f000 fa72 	bl	8005724 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8005240:	2101      	movs	r1, #1
 8005242:	4805      	ldr	r0, [pc, #20]	; (8005258 <MX_DMA2D_Init+0x5c>)
 8005244:	f7fb fe34 	bl	8000eb0 <HAL_DMA2D_ConfigLayer>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800524e:	f000 fa69 	bl	8005724 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8005252:	bf00      	nop
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	2000119c 	.word	0x2000119c
 800525c:	4002b000 	.word	0x4002b000

08005260 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005264:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <MX_I2C3_Init+0x74>)
 8005266:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <MX_I2C3_Init+0x78>)
 8005268:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800526a:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <MX_I2C3_Init+0x74>)
 800526c:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <MX_I2C3_Init+0x7c>)
 800526e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005270:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <MX_I2C3_Init+0x74>)
 8005272:	2200      	movs	r2, #0
 8005274:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005276:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <MX_I2C3_Init+0x74>)
 8005278:	2200      	movs	r2, #0
 800527a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800527c:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <MX_I2C3_Init+0x74>)
 800527e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005282:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005284:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <MX_I2C3_Init+0x74>)
 8005286:	2200      	movs	r2, #0
 8005288:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <MX_I2C3_Init+0x74>)
 800528c:	2200      	movs	r2, #0
 800528e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <MX_I2C3_Init+0x74>)
 8005292:	2200      	movs	r2, #0
 8005294:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005296:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <MX_I2C3_Init+0x74>)
 8005298:	2200      	movs	r2, #0
 800529a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800529c:	480d      	ldr	r0, [pc, #52]	; (80052d4 <MX_I2C3_Init+0x74>)
 800529e:	f7fc fa03 	bl	80016a8 <HAL_I2C_Init>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80052a8:	f000 fa3c 	bl	8005724 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80052ac:	2100      	movs	r1, #0
 80052ae:	4809      	ldr	r0, [pc, #36]	; (80052d4 <MX_I2C3_Init+0x74>)
 80052b0:	f7fc fb22 	bl	80018f8 <HAL_I2CEx_ConfigAnalogFilter>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80052ba:	f000 fa33 	bl	8005724 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80052be:	2100      	movs	r1, #0
 80052c0:	4804      	ldr	r0, [pc, #16]	; (80052d4 <MX_I2C3_Init+0x74>)
 80052c2:	f7fc fb55 	bl	8001970 <HAL_I2CEx_ConfigDigitalFilter>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80052cc:	f000 fa2a 	bl	8005724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80052d0:	bf00      	nop
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000ff4 	.word	0x20000ff4
 80052d8:	40005c00 	.word	0x40005c00
 80052dc:	000186a0 	.word	0x000186a0

080052e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b09a      	sub	sp, #104	; 0x68
 80052e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80052e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052ea:	2234      	movs	r2, #52	; 0x34
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 fc4c 	bl	8006b8c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80052f4:	463b      	mov	r3, r7
 80052f6:	2234      	movs	r2, #52	; 0x34
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fc46 	bl	8006b8c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8005300:	4b4e      	ldr	r3, [pc, #312]	; (800543c <MX_LTDC_Init+0x15c>)
 8005302:	4a4f      	ldr	r2, [pc, #316]	; (8005440 <MX_LTDC_Init+0x160>)
 8005304:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005306:	4b4d      	ldr	r3, [pc, #308]	; (800543c <MX_LTDC_Init+0x15c>)
 8005308:	2200      	movs	r2, #0
 800530a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800530c:	4b4b      	ldr	r3, [pc, #300]	; (800543c <MX_LTDC_Init+0x15c>)
 800530e:	2200      	movs	r2, #0
 8005310:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005312:	4b4a      	ldr	r3, [pc, #296]	; (800543c <MX_LTDC_Init+0x15c>)
 8005314:	2200      	movs	r2, #0
 8005316:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005318:	4b48      	ldr	r3, [pc, #288]	; (800543c <MX_LTDC_Init+0x15c>)
 800531a:	2200      	movs	r2, #0
 800531c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800531e:	4b47      	ldr	r3, [pc, #284]	; (800543c <MX_LTDC_Init+0x15c>)
 8005320:	2207      	movs	r2, #7
 8005322:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8005324:	4b45      	ldr	r3, [pc, #276]	; (800543c <MX_LTDC_Init+0x15c>)
 8005326:	2203      	movs	r2, #3
 8005328:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800532a:	4b44      	ldr	r3, [pc, #272]	; (800543c <MX_LTDC_Init+0x15c>)
 800532c:	220e      	movs	r2, #14
 800532e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8005330:	4b42      	ldr	r3, [pc, #264]	; (800543c <MX_LTDC_Init+0x15c>)
 8005332:	2205      	movs	r2, #5
 8005334:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8005336:	4b41      	ldr	r3, [pc, #260]	; (800543c <MX_LTDC_Init+0x15c>)
 8005338:	f240 228e 	movw	r2, #654	; 0x28e
 800533c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800533e:	4b3f      	ldr	r3, [pc, #252]	; (800543c <MX_LTDC_Init+0x15c>)
 8005340:	f240 12e5 	movw	r2, #485	; 0x1e5
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8005346:	4b3d      	ldr	r3, [pc, #244]	; (800543c <MX_LTDC_Init+0x15c>)
 8005348:	f44f 7225 	mov.w	r2, #660	; 0x294
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800534e:	4b3b      	ldr	r3, [pc, #236]	; (800543c <MX_LTDC_Init+0x15c>)
 8005350:	f240 12e7 	movw	r2, #487	; 0x1e7
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8005356:	4b39      	ldr	r3, [pc, #228]	; (800543c <MX_LTDC_Init+0x15c>)
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800535e:	4b37      	ldr	r3, [pc, #220]	; (800543c <MX_LTDC_Init+0x15c>)
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8005366:	4b35      	ldr	r3, [pc, #212]	; (800543c <MX_LTDC_Init+0x15c>)
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800536e:	4833      	ldr	r0, [pc, #204]	; (800543c <MX_LTDC_Init+0x15c>)
 8005370:	f7fc fb3e 	bl	80019f0 <HAL_LTDC_Init>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800537a:	f000 f9d3 	bl	8005724 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800538e:	2300      	movs	r3, #0
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800539a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800539e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80053a0:	2305      	movs	r3, #5
 80053a2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80053c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053c6:	2200      	movs	r2, #0
 80053c8:	4619      	mov	r1, r3
 80053ca:	481c      	ldr	r0, [pc, #112]	; (800543c <MX_LTDC_Init+0x15c>)
 80053cc:	f7fc fbe0 	bl	8001b90 <HAL_LTDC_ConfigLayer>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80053d6:	f000 f9a5 	bl	8005724 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80053ea:	2300      	movs	r3, #0
 80053ec:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80053f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053fa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80053fc:	2305      	movs	r3, #5
 80053fe:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800541e:	463b      	mov	r3, r7
 8005420:	2201      	movs	r2, #1
 8005422:	4619      	mov	r1, r3
 8005424:	4805      	ldr	r0, [pc, #20]	; (800543c <MX_LTDC_Init+0x15c>)
 8005426:	f7fc fbb3 	bl	8001b90 <HAL_LTDC_ConfigLayer>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8005430:	f000 f978 	bl	8005724 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8005434:	bf00      	nop
 8005436:	3768      	adds	r7, #104	; 0x68
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	200010a0 	.word	0x200010a0
 8005440:	40016800 	.word	0x40016800

08005444 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <MX_RNG_Init+0x20>)
 800544a:	4a07      	ldr	r2, [pc, #28]	; (8005468 <MX_RNG_Init+0x24>)
 800544c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800544e:	4805      	ldr	r0, [pc, #20]	; (8005464 <MX_RNG_Init+0x20>)
 8005450:	f7fd fbc2 	bl	8002bd8 <HAL_RNG_Init>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800545a:	f000 f963 	bl	8005724 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800545e:	bf00      	nop
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20001188 	.word	0x20001188
 8005468:	50060800 	.word	0x50060800

0800546c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8005470:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <MX_SPI5_Init+0x64>)
 8005472:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <MX_SPI5_Init+0x68>)
 8005474:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005476:	4b16      	ldr	r3, [pc, #88]	; (80054d0 <MX_SPI5_Init+0x64>)
 8005478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800547c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <MX_SPI5_Init+0x64>)
 8005480:	2200      	movs	r2, #0
 8005482:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8005484:	4b12      	ldr	r3, [pc, #72]	; (80054d0 <MX_SPI5_Init+0x64>)
 8005486:	2200      	movs	r2, #0
 8005488:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800548a:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <MX_SPI5_Init+0x64>)
 800548c:	2200      	movs	r2, #0
 800548e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <MX_SPI5_Init+0x64>)
 8005492:	2200      	movs	r2, #0
 8005494:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8005496:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <MX_SPI5_Init+0x64>)
 8005498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <MX_SPI5_Init+0x64>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <MX_SPI5_Init+0x64>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80054aa:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <MX_SPI5_Init+0x64>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <MX_SPI5_Init+0x64>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <MX_SPI5_Init+0x64>)
 80054b8:	220a      	movs	r2, #10
 80054ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80054bc:	4804      	ldr	r0, [pc, #16]	; (80054d0 <MX_SPI5_Init+0x64>)
 80054be:	f7fd fc83 	bl	8002dc8 <HAL_SPI_Init>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80054c8:	f000 f92c 	bl	8005724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80054cc:	bf00      	nop
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20001048 	.word	0x20001048
 80054d4:	40015000 	.word	0x40015000

080054d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <MX_USART1_UART_Init+0x4c>)
 80054de:	4a12      	ldr	r2, [pc, #72]	; (8005528 <MX_USART1_UART_Init+0x50>)
 80054e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80054e2:	4b10      	ldr	r3, [pc, #64]	; (8005524 <MX_USART1_UART_Init+0x4c>)
 80054e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054ea:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <MX_USART1_UART_Init+0x4c>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054f0:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <MX_USART1_UART_Init+0x4c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <MX_USART1_UART_Init+0x4c>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <MX_USART1_UART_Init+0x4c>)
 80054fe:	220c      	movs	r2, #12
 8005500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005502:	4b08      	ldr	r3, [pc, #32]	; (8005524 <MX_USART1_UART_Init+0x4c>)
 8005504:	2200      	movs	r2, #0
 8005506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <MX_USART1_UART_Init+0x4c>)
 800550a:	2200      	movs	r2, #0
 800550c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800550e:	4805      	ldr	r0, [pc, #20]	; (8005524 <MX_USART1_UART_Init+0x4c>)
 8005510:	f7fe f9e4 	bl	80038dc <HAL_UART_Init>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800551a:	f000 f903 	bl	8005724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800551e:	bf00      	nop
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20001148 	.word	0x20001148
 8005528:	40011000 	.word	0x40011000

0800552c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	60da      	str	r2, [r3, #12]
 800553e:	611a      	str	r2, [r3, #16]
 8005540:	615a      	str	r2, [r3, #20]
 8005542:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005544:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <MX_FMC_Init+0x94>)
 8005546:	4a1f      	ldr	r2, [pc, #124]	; (80055c4 <MX_FMC_Init+0x98>)
 8005548:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800554a:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <MX_FMC_Init+0x94>)
 800554c:	2201      	movs	r2, #1
 800554e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005550:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <MX_FMC_Init+0x94>)
 8005552:	2200      	movs	r2, #0
 8005554:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8005556:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <MX_FMC_Init+0x94>)
 8005558:	2200      	movs	r2, #0
 800555a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800555c:	4b18      	ldr	r3, [pc, #96]	; (80055c0 <MX_FMC_Init+0x94>)
 800555e:	2210      	movs	r2, #16
 8005560:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005562:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <MX_FMC_Init+0x94>)
 8005564:	2240      	movs	r2, #64	; 0x40
 8005566:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <MX_FMC_Init+0x94>)
 800556a:	2280      	movs	r2, #128	; 0x80
 800556c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <MX_FMC_Init+0x94>)
 8005570:	2200      	movs	r2, #0
 8005572:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8005574:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <MX_FMC_Init+0x94>)
 8005576:	2200      	movs	r2, #0
 8005578:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <MX_FMC_Init+0x94>)
 800557c:	2200      	movs	r2, #0
 800557e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8005580:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <MX_FMC_Init+0x94>)
 8005582:	2200      	movs	r2, #0
 8005584:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8005586:	2310      	movs	r3, #16
 8005588:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800558a:	2310      	movs	r3, #16
 800558c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800558e:	2310      	movs	r3, #16
 8005590:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8005592:	2310      	movs	r3, #16
 8005594:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8005596:	2310      	movs	r3, #16
 8005598:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800559a:	2310      	movs	r3, #16
 800559c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800559e:	2310      	movs	r3, #16
 80055a0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80055a2:	1d3b      	adds	r3, r7, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4806      	ldr	r0, [pc, #24]	; (80055c0 <MX_FMC_Init+0x94>)
 80055a8:	f7fd fb8f 	bl	8002cca <HAL_SDRAM_Init>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80055b2:	f000 f8b7 	bl	8005724 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80055b6:	bf00      	nop
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	200011dc 	.word	0x200011dc
 80055c4:	a0000140 	.word	0xa0000140

080055c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	; 0x38
 80055cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	605a      	str	r2, [r3, #4]
 80055d8:	609a      	str	r2, [r3, #8]
 80055da:	60da      	str	r2, [r3, #12]
 80055dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80055de:	2300      	movs	r3, #0
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	4b4d      	ldr	r3, [pc, #308]	; (8005718 <MX_GPIO_Init+0x150>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	4a4c      	ldr	r2, [pc, #304]	; (8005718 <MX_GPIO_Init+0x150>)
 80055e8:	f043 0320 	orr.w	r3, r3, #32
 80055ec:	6313      	str	r3, [r2, #48]	; 0x30
 80055ee:	4b4a      	ldr	r3, [pc, #296]	; (8005718 <MX_GPIO_Init+0x150>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	623b      	str	r3, [r7, #32]
 80055f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	4b46      	ldr	r3, [pc, #280]	; (8005718 <MX_GPIO_Init+0x150>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	4a45      	ldr	r2, [pc, #276]	; (8005718 <MX_GPIO_Init+0x150>)
 8005604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005608:	6313      	str	r3, [r2, #48]	; 0x30
 800560a:	4b43      	ldr	r3, [pc, #268]	; (8005718 <MX_GPIO_Init+0x150>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005616:	2300      	movs	r3, #0
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	4b3f      	ldr	r3, [pc, #252]	; (8005718 <MX_GPIO_Init+0x150>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	4a3e      	ldr	r2, [pc, #248]	; (8005718 <MX_GPIO_Init+0x150>)
 8005620:	f043 0304 	orr.w	r3, r3, #4
 8005624:	6313      	str	r3, [r2, #48]	; 0x30
 8005626:	4b3c      	ldr	r3, [pc, #240]	; (8005718 <MX_GPIO_Init+0x150>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	4b38      	ldr	r3, [pc, #224]	; (8005718 <MX_GPIO_Init+0x150>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	4a37      	ldr	r2, [pc, #220]	; (8005718 <MX_GPIO_Init+0x150>)
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	6313      	str	r3, [r2, #48]	; 0x30
 8005642:	4b35      	ldr	r3, [pc, #212]	; (8005718 <MX_GPIO_Init+0x150>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	4b31      	ldr	r3, [pc, #196]	; (8005718 <MX_GPIO_Init+0x150>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	4a30      	ldr	r2, [pc, #192]	; (8005718 <MX_GPIO_Init+0x150>)
 8005658:	f043 0302 	orr.w	r3, r3, #2
 800565c:	6313      	str	r3, [r2, #48]	; 0x30
 800565e:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <MX_GPIO_Init+0x150>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <MX_GPIO_Init+0x150>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	4a29      	ldr	r2, [pc, #164]	; (8005718 <MX_GPIO_Init+0x150>)
 8005674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005678:	6313      	str	r3, [r2, #48]	; 0x30
 800567a:	4b27      	ldr	r3, [pc, #156]	; (8005718 <MX_GPIO_Init+0x150>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	4b23      	ldr	r3, [pc, #140]	; (8005718 <MX_GPIO_Init+0x150>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	4a22      	ldr	r2, [pc, #136]	; (8005718 <MX_GPIO_Init+0x150>)
 8005690:	f043 0310 	orr.w	r3, r3, #16
 8005694:	6313      	str	r3, [r2, #48]	; 0x30
 8005696:	4b20      	ldr	r3, [pc, #128]	; (8005718 <MX_GPIO_Init+0x150>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056a2:	2300      	movs	r3, #0
 80056a4:	607b      	str	r3, [r7, #4]
 80056a6:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <MX_GPIO_Init+0x150>)
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	4a1b      	ldr	r2, [pc, #108]	; (8005718 <MX_GPIO_Init+0x150>)
 80056ac:	f043 0308 	orr.w	r3, r3, #8
 80056b0:	6313      	str	r3, [r2, #48]	; 0x30
 80056b2:	4b19      	ldr	r3, [pc, #100]	; (8005718 <MX_GPIO_Init+0x150>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80056be:	2200      	movs	r2, #0
 80056c0:	2104      	movs	r1, #4
 80056c2:	4816      	ldr	r0, [pc, #88]	; (800571c <MX_GPIO_Init+0x154>)
 80056c4:	f7fb ffd6 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80056c8:	2200      	movs	r2, #0
 80056ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056ce:	4814      	ldr	r0, [pc, #80]	; (8005720 <MX_GPIO_Init+0x158>)
 80056d0:	f7fb ffd0 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80056d4:	2304      	movs	r3, #4
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056d8:	2301      	movs	r3, #1
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056e0:	2300      	movs	r3, #0
 80056e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e8:	4619      	mov	r1, r3
 80056ea:	480c      	ldr	r0, [pc, #48]	; (800571c <MX_GPIO_Init+0x154>)
 80056ec:	f7fb fd0e 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80056f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056f6:	2301      	movs	r3, #1
 80056f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056fe:	2300      	movs	r3, #0
 8005700:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005706:	4619      	mov	r1, r3
 8005708:	4805      	ldr	r0, [pc, #20]	; (8005720 <MX_GPIO_Init+0x158>)
 800570a:	f7fb fcff 	bl	800110c <HAL_GPIO_Init>

}
 800570e:	bf00      	nop
 8005710:	3738      	adds	r7, #56	; 0x38
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40023800 	.word	0x40023800
 800571c:	40020800 	.word	0x40020800
 8005720:	40020c00 	.word	0x40020c00

08005724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005728:	bf00      	nop
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8005738:	4819      	ldr	r0, [pc, #100]	; (80057a0 <SPIx_Init+0x6c>)
 800573a:	f7fd ffb0 	bl	800369e <HAL_SPI_GetState>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d12b      	bne.n	800579c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8005744:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <SPIx_Init+0x6c>)
 8005746:	4a17      	ldr	r2, [pc, #92]	; (80057a4 <SPIx_Init+0x70>)
 8005748:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800574a:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <SPIx_Init+0x6c>)
 800574c:	2218      	movs	r2, #24
 800574e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8005750:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <SPIx_Init+0x6c>)
 8005752:	2200      	movs	r2, #0
 8005754:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8005756:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <SPIx_Init+0x6c>)
 8005758:	2200      	movs	r2, #0
 800575a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <SPIx_Init+0x6c>)
 800575e:	2200      	movs	r2, #0
 8005760:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8005762:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <SPIx_Init+0x6c>)
 8005764:	2200      	movs	r2, #0
 8005766:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8005768:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <SPIx_Init+0x6c>)
 800576a:	2207      	movs	r2, #7
 800576c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800576e:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <SPIx_Init+0x6c>)
 8005770:	2200      	movs	r2, #0
 8005772:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <SPIx_Init+0x6c>)
 8005776:	2200      	movs	r2, #0
 8005778:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <SPIx_Init+0x6c>)
 800577c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005780:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <SPIx_Init+0x6c>)
 8005784:	2200      	movs	r2, #0
 8005786:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <SPIx_Init+0x6c>)
 800578a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800578e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8005790:	4803      	ldr	r0, [pc, #12]	; (80057a0 <SPIx_Init+0x6c>)
 8005792:	f000 f853 	bl	800583c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8005796:	4802      	ldr	r0, [pc, #8]	; (80057a0 <SPIx_Init+0x6c>)
 8005798:	f7fd fb16 	bl	8002dc8 <HAL_SPI_Init>
  } 
}
 800579c:	bf00      	nop
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000e40 	.word	0x20000e40
 80057a4:	40015000 	.word	0x40015000

080057a8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <SPIx_Read+0x38>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f107 0108 	add.w	r1, r7, #8
 80057c2:	4808      	ldr	r0, [pc, #32]	; (80057e4 <SPIx_Read+0x3c>)
 80057c4:	f7fd fcc0 	bl	8003148 <HAL_SPI_Receive>
 80057c8:	4603      	mov	r3, r0
 80057ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80057d2:	f000 f827 	bl	8005824 <SPIx_Error>
  }
  
  return readvalue;
 80057d6:	68bb      	ldr	r3, [r7, #8]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20000200 	.word	0x20000200
 80057e4:	20000e40 	.word	0x20000e40

080057e8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <SPIx_Write+0x34>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	1db9      	adds	r1, r7, #6
 80057fc:	2201      	movs	r2, #1
 80057fe:	4808      	ldr	r0, [pc, #32]	; (8005820 <SPIx_Write+0x38>)
 8005800:	f7fd fb6e 	bl	8002ee0 <HAL_SPI_Transmit>
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800580e:	f000 f809 	bl	8005824 <SPIx_Error>
  }
}
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000200 	.word	0x20000200
 8005820:	20000e40 	.word	0x20000e40

08005824 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8005828:	4803      	ldr	r0, [pc, #12]	; (8005838 <SPIx_Error+0x14>)
 800582a:	f7fd fb31 	bl	8002e90 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800582e:	f7ff ff81 	bl	8005734 <SPIx_Init>
}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000e40 	.word	0x20000e40

0800583c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	; 0x28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <SPIx_MspInit+0x6c>)
 800584a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584c:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <SPIx_MspInit+0x6c>)
 800584e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005852:	6453      	str	r3, [r2, #68]	; 0x44
 8005854:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <SPIx_MspInit+0x6c>)
 8005856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <SPIx_MspInit+0x6c>)
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	4a0f      	ldr	r2, [pc, #60]	; (80058a8 <SPIx_MspInit+0x6c>)
 800586a:	f043 0320 	orr.w	r3, r3, #32
 800586e:	6313      	str	r3, [r2, #48]	; 0x30
 8005870:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <SPIx_MspInit+0x6c>)
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800587c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005880:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8005882:	2302      	movs	r3, #2
 8005884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8005886:	2302      	movs	r3, #2
 8005888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800588a:	2301      	movs	r3, #1
 800588c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800588e:	2305      	movs	r3, #5
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005892:	f107 0314 	add.w	r3, r7, #20
 8005896:	4619      	mov	r1, r3
 8005898:	4804      	ldr	r0, [pc, #16]	; (80058ac <SPIx_MspInit+0x70>)
 800589a:	f7fb fc37 	bl	800110c <HAL_GPIO_Init>
}
 800589e:	bf00      	nop
 80058a0:	3728      	adds	r7, #40	; 0x28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40021400 	.word	0x40021400

080058b0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80058b6:	4b36      	ldr	r3, [pc, #216]	; (8005990 <LCD_IO_Init+0xe0>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d164      	bne.n	8005988 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80058be:	4b34      	ldr	r3, [pc, #208]	; (8005990 <LCD_IO_Init+0xe0>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80058c4:	2300      	movs	r3, #0
 80058c6:	60bb      	str	r3, [r7, #8]
 80058c8:	4b32      	ldr	r3, [pc, #200]	; (8005994 <LCD_IO_Init+0xe4>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	4a31      	ldr	r2, [pc, #196]	; (8005994 <LCD_IO_Init+0xe4>)
 80058ce:	f043 0308 	orr.w	r3, r3, #8
 80058d2:	6313      	str	r3, [r2, #48]	; 0x30
 80058d4:	4b2f      	ldr	r3, [pc, #188]	; (8005994 <LCD_IO_Init+0xe4>)
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80058e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80058e6:	2301      	movs	r3, #1
 80058e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80058ee:	2302      	movs	r3, #2
 80058f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80058f2:	f107 030c 	add.w	r3, r7, #12
 80058f6:	4619      	mov	r1, r3
 80058f8:	4827      	ldr	r0, [pc, #156]	; (8005998 <LCD_IO_Init+0xe8>)
 80058fa:	f7fb fc07 	bl	800110c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
 8005902:	4b24      	ldr	r3, [pc, #144]	; (8005994 <LCD_IO_Init+0xe4>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	4a23      	ldr	r2, [pc, #140]	; (8005994 <LCD_IO_Init+0xe4>)
 8005908:	f043 0308 	orr.w	r3, r3, #8
 800590c:	6313      	str	r3, [r2, #48]	; 0x30
 800590e:	4b21      	ldr	r3, [pc, #132]	; (8005994 <LCD_IO_Init+0xe4>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	607b      	str	r3, [r7, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800591a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800591e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005920:	2301      	movs	r3, #1
 8005922:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8005928:	2302      	movs	r3, #2
 800592a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800592c:	f107 030c 	add.w	r3, r7, #12
 8005930:	4619      	mov	r1, r3
 8005932:	4819      	ldr	r0, [pc, #100]	; (8005998 <LCD_IO_Init+0xe8>)
 8005934:	f7fb fbea 	bl	800110c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8005938:	2300      	movs	r3, #0
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	4b15      	ldr	r3, [pc, #84]	; (8005994 <LCD_IO_Init+0xe4>)
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	4a14      	ldr	r2, [pc, #80]	; (8005994 <LCD_IO_Init+0xe4>)
 8005942:	f043 0304 	orr.w	r3, r3, #4
 8005946:	6313      	str	r3, [r2, #48]	; 0x30
 8005948:	4b12      	ldr	r3, [pc, #72]	; (8005994 <LCD_IO_Init+0xe4>)
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8005954:	2304      	movs	r3, #4
 8005956:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005958:	2301      	movs	r3, #1
 800595a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8005960:	2302      	movs	r3, #2
 8005962:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8005964:	f107 030c 	add.w	r3, r7, #12
 8005968:	4619      	mov	r1, r3
 800596a:	480c      	ldr	r0, [pc, #48]	; (800599c <LCD_IO_Init+0xec>)
 800596c:	f7fb fbce 	bl	800110c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8005970:	2200      	movs	r2, #0
 8005972:	2104      	movs	r1, #4
 8005974:	4809      	ldr	r0, [pc, #36]	; (800599c <LCD_IO_Init+0xec>)
 8005976:	f7fb fe7d 	bl	8001674 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800597a:	2201      	movs	r2, #1
 800597c:	2104      	movs	r1, #4
 800597e:	4807      	ldr	r0, [pc, #28]	; (800599c <LCD_IO_Init+0xec>)
 8005980:	f7fb fe78 	bl	8001674 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8005984:	f7ff fed6 	bl	8005734 <SPIx_Init>
  }
}
 8005988:	bf00      	nop
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000e98 	.word	0x20000e98
 8005994:	40023800 	.word	0x40023800
 8005998:	40020c00 	.word	0x40020c00
 800599c:	40020800 	.word	0x40020800

080059a0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80059aa:	2201      	movs	r2, #1
 80059ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059b0:	480a      	ldr	r0, [pc, #40]	; (80059dc <LCD_IO_WriteData+0x3c>)
 80059b2:	f7fb fe5f 	bl	8001674 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80059b6:	2200      	movs	r2, #0
 80059b8:	2104      	movs	r1, #4
 80059ba:	4809      	ldr	r0, [pc, #36]	; (80059e0 <LCD_IO_WriteData+0x40>)
 80059bc:	f7fb fe5a 	bl	8001674 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff ff10 	bl	80057e8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80059c8:	2201      	movs	r2, #1
 80059ca:	2104      	movs	r1, #4
 80059cc:	4804      	ldr	r0, [pc, #16]	; (80059e0 <LCD_IO_WriteData+0x40>)
 80059ce:	f7fb fe51 	bl	8001674 <HAL_GPIO_WritePin>
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40020c00 	.word	0x40020c00
 80059e0:	40020800 	.word	0x40020800

080059e4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80059ee:	2200      	movs	r2, #0
 80059f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059f4:	480a      	ldr	r0, [pc, #40]	; (8005a20 <LCD_IO_WriteReg+0x3c>)
 80059f6:	f7fb fe3d 	bl	8001674 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80059fa:	2200      	movs	r2, #0
 80059fc:	2104      	movs	r1, #4
 80059fe:	4809      	ldr	r0, [pc, #36]	; (8005a24 <LCD_IO_WriteReg+0x40>)
 8005a00:	f7fb fe38 	bl	8001674 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff feed 	bl	80057e8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005a0e:	2201      	movs	r2, #1
 8005a10:	2104      	movs	r1, #4
 8005a12:	4804      	ldr	r0, [pc, #16]	; (8005a24 <LCD_IO_WriteReg+0x40>)
 8005a14:	f7fb fe2e 	bl	8001674 <HAL_GPIO_WritePin>
}
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40020c00 	.word	0x40020c00
 8005a24:	40020800 	.word	0x40020800

08005a28 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	460a      	mov	r2, r1
 8005a32:	80fb      	strh	r3, [r7, #6]
 8005a34:	4613      	mov	r3, r2
 8005a36:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2104      	movs	r1, #4
 8005a40:	4810      	ldr	r0, [pc, #64]	; (8005a84 <LCD_IO_ReadData+0x5c>)
 8005a42:	f7fb fe17 	bl	8001674 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8005a46:	2200      	movs	r2, #0
 8005a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a4c:	480e      	ldr	r0, [pc, #56]	; (8005a88 <LCD_IO_ReadData+0x60>)
 8005a4e:	f7fb fe11 	bl	8001674 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fec7 	bl	80057e8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8005a5a:	797b      	ldrb	r3, [r7, #5]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fea3 	bl	80057a8 <SPIx_Read>
 8005a62:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8005a64:	2201      	movs	r2, #1
 8005a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a6a:	4807      	ldr	r0, [pc, #28]	; (8005a88 <LCD_IO_ReadData+0x60>)
 8005a6c:	f7fb fe02 	bl	8001674 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005a70:	2201      	movs	r2, #1
 8005a72:	2104      	movs	r1, #4
 8005a74:	4803      	ldr	r0, [pc, #12]	; (8005a84 <LCD_IO_ReadData+0x5c>)
 8005a76:	f7fb fdfd 	bl	8001674 <HAL_GPIO_WritePin>
  
  return readvalue;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40020800 	.word	0x40020800
 8005a88:	40020c00 	.word	0x40020c00

08005a8c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7fa fd9b 	bl	80005d0 <HAL_Delay>
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8005aa8:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005aaa:	4a2e      	ldr	r2, [pc, #184]	; (8005b64 <BSP_LCD_Init+0xc0>)
 8005aac:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8005aae:	4b2c      	ldr	r3, [pc, #176]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005ab0:	2209      	movs	r2, #9
 8005ab2:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8005aba:	4b29      	ldr	r3, [pc, #164]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005abc:	221d      	movs	r2, #29
 8005abe:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8005ac0:	4b27      	ldr	r3, [pc, #156]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8005ac6:	4b26      	ldr	r3, [pc, #152]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005ac8:	f240 120d 	movw	r2, #269	; 0x10d
 8005acc:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8005ace:	4b24      	ldr	r3, [pc, #144]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005ad0:	f240 1243 	movw	r2, #323	; 0x143
 8005ad4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8005ad6:	4b22      	ldr	r3, [pc, #136]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005ad8:	f240 1217 	movw	r2, #279	; 0x117
 8005adc:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8005ade:	4b20      	ldr	r3, [pc, #128]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005ae0:	f240 1247 	movw	r2, #327	; 0x147
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8005ae6:	4b1e      	ldr	r3, [pc, #120]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8005aee:	4b1c      	ldr	r3, [pc, #112]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8005af6:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005afe:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <BSP_LCD_Init+0xc4>)
 8005b00:	2208      	movs	r2, #8
 8005b02:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8005b04:	4b18      	ldr	r3, [pc, #96]	; (8005b68 <BSP_LCD_Init+0xc4>)
 8005b06:	22c0      	movs	r2, #192	; 0xc0
 8005b08:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8005b0a:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <BSP_LCD_Init+0xc4>)
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8005b10:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <BSP_LCD_Init+0xc4>)
 8005b12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b16:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8005b18:	4813      	ldr	r0, [pc, #76]	; (8005b68 <BSP_LCD_Init+0xc4>)
 8005b1a:	f7fc feb9 	bl	8002890 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005b1e:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005b24:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8005b36:	f000 f95f 	bl	8005df8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8005b3a:	4809      	ldr	r0, [pc, #36]	; (8005b60 <BSP_LCD_Init+0xbc>)
 8005b3c:	f7fb ff58 	bl	80019f0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <BSP_LCD_Init+0xc8>)
 8005b42:	4a0b      	ldr	r2, [pc, #44]	; (8005b70 <BSP_LCD_Init+0xcc>)
 8005b44:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8005b46:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <BSP_LCD_Init+0xc8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8005b4e:	f000 fa61 	bl	8006014 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005b52:	4808      	ldr	r0, [pc, #32]	; (8005b74 <BSP_LCD_Init+0xd0>)
 8005b54:	f000 f8b4 	bl	8005cc0 <BSP_LCD_SetFont>

  return LCD_OK;
 8005b58:	2300      	movs	r3, #0
}  
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20001210 	.word	0x20001210
 8005b64:	40016800 	.word	0x40016800
 8005b68:	20000edc 	.word	0x20000edc
 8005b6c:	200012b8 	.word	0x200012b8
 8005b70:	200001c8 	.word	0x200001c8
 8005b74:	20000204 	.word	0x20000204

08005b78 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8005b7c:	4b03      	ldr	r3, [pc, #12]	; (8005b8c <BSP_LCD_GetXSize+0x14>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	4798      	blx	r3
 8005b84:	4603      	mov	r3, r0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200012b8 	.word	0x200012b8

08005b90 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8005b94:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <BSP_LCD_GetYSize+0x14>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	4798      	blx	r3
 8005b9c:	4603      	mov	r3, r0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200012b8 	.word	0x200012b8

08005ba8 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b090      	sub	sp, #64	; 0x40
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	6039      	str	r1, [r7, #0]
 8005bb2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8005bb8:	f7ff ffde 	bl	8005b78 <BSP_LCD_GetXSize>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005bc4:	f7ff ffe4 	bl	8005b90 <BSP_LCD_GetYSize>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8005bd4:	23ff      	movs	r3, #255	; 0xff
 8005bd6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005bee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005bf4:	2307      	movs	r3, #7
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8005bf8:	f7ff ffbe 	bl	8005b78 <BSP_LCD_GetXSize>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8005c00:	f7ff ffc6 	bl	8005b90 <BSP_LCD_GetYSize>
 8005c04:	4603      	mov	r3, r0
 8005c06:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8005c08:	88fa      	ldrh	r2, [r7, #6]
 8005c0a:	f107 030c 	add.w	r3, r7, #12
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4814      	ldr	r0, [pc, #80]	; (8005c64 <BSP_LCD_LayerDefaultInit+0xbc>)
 8005c12:	f7fb ffbd 	bl	8001b90 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	4913      	ldr	r1, [pc, #76]	; (8005c68 <BSP_LCD_LayerDefaultInit+0xc0>)
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	3304      	adds	r3, #4
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8005c2c:	88fa      	ldrh	r2, [r7, #6]
 8005c2e:	490e      	ldr	r1, [pc, #56]	; (8005c68 <BSP_LCD_LayerDefaultInit+0xc0>)
 8005c30:	4613      	mov	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	4a0b      	ldr	r2, [pc, #44]	; (8005c6c <BSP_LCD_LayerDefaultInit+0xc4>)
 8005c3e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8005c40:	88fa      	ldrh	r2, [r7, #6]
 8005c42:	4909      	ldr	r1, [pc, #36]	; (8005c68 <BSP_LCD_LayerDefaultInit+0xc0>)
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8005c52:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8005c54:	4803      	ldr	r0, [pc, #12]	; (8005c64 <BSP_LCD_LayerDefaultInit+0xbc>)
 8005c56:	f7fb ffd9 	bl	8001c0c <HAL_LTDC_EnableDither>
}
 8005c5a:	bf00      	nop
 8005c5c:	3740      	adds	r7, #64	; 0x40
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20001210 	.word	0x20001210
 8005c68:	20000f10 	.word	0x20000f10
 8005c6c:	20000204 	.word	0x20000204

08005c70 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8005c78:	4a04      	ldr	r2, [pc, #16]	; (8005c8c <BSP_LCD_SelectLayer+0x1c>)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6013      	str	r3, [r2, #0]
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000f0c 	.word	0x20000f0c

08005c90 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8005c98:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <BSP_LCD_SetTextColor+0x28>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4907      	ldr	r1, [pc, #28]	; (8005cbc <BSP_LCD_SetTextColor+0x2c>)
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	440b      	add	r3, r1
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	601a      	str	r2, [r3, #0]
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	20000f0c 	.word	0x20000f0c
 8005cbc:	20000f10 	.word	0x20000f10

08005cc0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8005cc8:	4b08      	ldr	r3, [pc, #32]	; (8005cec <BSP_LCD_SetFont+0x2c>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4908      	ldr	r1, [pc, #32]	; (8005cf0 <BSP_LCD_SetFont+0x30>)
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3308      	adds	r3, #8
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	601a      	str	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20000f0c 	.word	0x20000f0c
 8005cf0:	20000f10 	.word	0x20000f10

08005cf4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8005cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <BSP_LCD_Clear+0x48>)
 8005cfe:	681c      	ldr	r4, [r3, #0]
 8005d00:	4b0e      	ldr	r3, [pc, #56]	; (8005d3c <BSP_LCD_Clear+0x48>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a0e      	ldr	r2, [pc, #56]	; (8005d40 <BSP_LCD_Clear+0x4c>)
 8005d06:	2134      	movs	r1, #52	; 0x34
 8005d08:	fb01 f303 	mul.w	r3, r1, r3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	335c      	adds	r3, #92	; 0x5c
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461d      	mov	r5, r3
 8005d14:	f7ff ff30 	bl	8005b78 <BSP_LCD_GetXSize>
 8005d18:	4606      	mov	r6, r0
 8005d1a:	f7ff ff39 	bl	8005b90 <BSP_LCD_GetYSize>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	2300      	movs	r3, #0
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f000 f938 	bl	8005fa4 <FillBuffer>
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3c:	20000f0c 	.word	0x20000f0c
 8005d40:	20001210 	.word	0x20001210

08005d44 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af02      	add	r7, sp, #8
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	4608      	mov	r0, r1
 8005d50:	4611      	mov	r1, r2
 8005d52:	461a      	mov	r2, r3
 8005d54:	4623      	mov	r3, r4
 8005d56:	80fb      	strh	r3, [r7, #6]
 8005d58:	4603      	mov	r3, r0
 8005d5a:	80bb      	strh	r3, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
 8005d60:	4613      	mov	r3, r2
 8005d62:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005d68:	4b20      	ldr	r3, [pc, #128]	; (8005dec <BSP_LCD_FillRect+0xa8>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4920      	ldr	r1, [pc, #128]	; (8005df0 <BSP_LCD_FillRect+0xac>)
 8005d6e:	4613      	mov	r3, r2
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff ff88 	bl	8005c90 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005d80:	4b1a      	ldr	r3, [pc, #104]	; (8005dec <BSP_LCD_FillRect+0xa8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <BSP_LCD_FillRect+0xb0>)
 8005d86:	2134      	movs	r1, #52	; 0x34
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	335c      	adds	r3, #92	; 0x5c
 8005d90:	681c      	ldr	r4, [r3, #0]
 8005d92:	f7ff fef1 	bl	8005b78 <BSP_LCD_GetXSize>
 8005d96:	4602      	mov	r2, r0
 8005d98:	88bb      	ldrh	r3, [r7, #4]
 8005d9a:	fb03 f202 	mul.w	r2, r3, r2
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4423      	add	r3, r4
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8005da8:	4b10      	ldr	r3, [pc, #64]	; (8005dec <BSP_LCD_FillRect+0xa8>)
 8005daa:	681c      	ldr	r4, [r3, #0]
 8005dac:	68fd      	ldr	r5, [r7, #12]
 8005dae:	887e      	ldrh	r6, [r7, #2]
 8005db0:	f8b7 8000 	ldrh.w	r8, [r7]
 8005db4:	f7ff fee0 	bl	8005b78 <BSP_LCD_GetXSize>
 8005db8:	4602      	mov	r2, r0
 8005dba:	887b      	ldrh	r3, [r7, #2]
 8005dbc:	1ad1      	subs	r1, r2, r3
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <BSP_LCD_FillRect+0xa8>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	480b      	ldr	r0, [pc, #44]	; (8005df0 <BSP_LCD_FillRect+0xac>)
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4403      	add	r3, r0
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	9100      	str	r1, [sp, #0]
 8005dd4:	4643      	mov	r3, r8
 8005dd6:	4632      	mov	r2, r6
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f000 f8e2 	bl	8005fa4 <FillBuffer>
}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dea:	bf00      	nop
 8005dec:	20000f0c 	.word	0x20000f0c
 8005df0:	20000f10 	.word	0x20000f10
 8005df4:	20001210 	.word	0x20001210

08005df8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08e      	sub	sp, #56	; 0x38
 8005dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005dfe:	2300      	movs	r3, #0
 8005e00:	623b      	str	r3, [r7, #32]
 8005e02:	4b61      	ldr	r3, [pc, #388]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	4a60      	ldr	r2, [pc, #384]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e0e:	4b5e      	ldr	r3, [pc, #376]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	4b5a      	ldr	r3, [pc, #360]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	4a59      	ldr	r2, [pc, #356]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e28:	6313      	str	r3, [r2, #48]	; 0x30
 8005e2a:	4b57      	ldr	r3, [pc, #348]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e36:	2300      	movs	r3, #0
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	4b53      	ldr	r3, [pc, #332]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	4a52      	ldr	r2, [pc, #328]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	6313      	str	r3, [r2, #48]	; 0x30
 8005e46:	4b50      	ldr	r3, [pc, #320]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	4b4c      	ldr	r3, [pc, #304]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	4a4b      	ldr	r2, [pc, #300]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	6313      	str	r3, [r2, #48]	; 0x30
 8005e62:	4b49      	ldr	r3, [pc, #292]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e6e:	2300      	movs	r3, #0
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	4b45      	ldr	r3, [pc, #276]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	4a44      	ldr	r2, [pc, #272]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e78:	f043 0304 	orr.w	r3, r3, #4
 8005e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e7e:	4b42      	ldr	r3, [pc, #264]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	4b3e      	ldr	r3, [pc, #248]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	4a3d      	ldr	r2, [pc, #244]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e94:	f043 0308 	orr.w	r3, r3, #8
 8005e98:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9a:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	4b37      	ldr	r3, [pc, #220]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	4a36      	ldr	r2, [pc, #216]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005eb0:	f043 0320 	orr.w	r3, r3, #32
 8005eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005eb6:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	60bb      	str	r3, [r7, #8]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
 8005ec6:	4b30      	ldr	r3, [pc, #192]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	4a2f      	ldr	r2, [pc, #188]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ed2:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <BSP_LCD_MspInit+0x190>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	607b      	str	r3, [r7, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8005ede:	f641 0358 	movw	r3, #6232	; 0x1858
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8005eec:	2302      	movs	r3, #2
 8005eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8005ef0:	230e      	movs	r3, #14
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4824      	ldr	r0, [pc, #144]	; (8005f8c <BSP_LCD_MspInit+0x194>)
 8005efc:	f7fb f906 	bl	800110c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8005f00:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4820      	ldr	r0, [pc, #128]	; (8005f90 <BSP_LCD_MspInit+0x198>)
 8005f0e:	f7fb f8fd 	bl	800110c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8005f12:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8005f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	481d      	ldr	r0, [pc, #116]	; (8005f94 <BSP_LCD_MspInit+0x19c>)
 8005f20:	f7fb f8f4 	bl	800110c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8005f24:	2348      	movs	r3, #72	; 0x48
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8005f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	481a      	ldr	r0, [pc, #104]	; (8005f98 <BSP_LCD_MspInit+0x1a0>)
 8005f30:	f7fb f8ec 	bl	800110c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8005f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8005f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4816      	ldr	r0, [pc, #88]	; (8005f9c <BSP_LCD_MspInit+0x1a4>)
 8005f42:	f7fb f8e3 	bl	800110c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8005f46:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8005f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f50:	4619      	mov	r1, r3
 8005f52:	4813      	ldr	r0, [pc, #76]	; (8005fa0 <BSP_LCD_MspInit+0x1a8>)
 8005f54:	f7fb f8da 	bl	800110c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8005f5c:	2309      	movs	r3, #9
 8005f5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f64:	4619      	mov	r1, r3
 8005f66:	480a      	ldr	r0, [pc, #40]	; (8005f90 <BSP_LCD_MspInit+0x198>)
 8005f68:	f7fb f8d0 	bl	800110c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8005f6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8005f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f76:	4619      	mov	r1, r3
 8005f78:	4809      	ldr	r0, [pc, #36]	; (8005fa0 <BSP_LCD_MspInit+0x1a8>)
 8005f7a:	f7fb f8c7 	bl	800110c <HAL_GPIO_Init>
}
 8005f7e:	bf00      	nop
 8005f80:	3738      	adds	r7, #56	; 0x38
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40023800 	.word	0x40023800
 8005f8c:	40020000 	.word	0x40020000
 8005f90:	40020400 	.word	0x40020400
 8005f94:	40020800 	.word	0x40020800
 8005f98:	40020c00 	.word	0x40020c00
 8005f9c:	40021400 	.word	0x40021400
 8005fa0:	40021800 	.word	0x40021800

08005fa4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8005fb2:	4b16      	ldr	r3, [pc, #88]	; (800600c <FillBuffer+0x68>)
 8005fb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005fb8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005fba:	4b14      	ldr	r3, [pc, #80]	; (800600c <FillBuffer+0x68>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8005fc0:	4a12      	ldr	r2, [pc, #72]	; (800600c <FillBuffer+0x68>)
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8005fc6:	4b11      	ldr	r3, [pc, #68]	; (800600c <FillBuffer+0x68>)
 8005fc8:	4a11      	ldr	r2, [pc, #68]	; (8006010 <FillBuffer+0x6c>)
 8005fca:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8005fcc:	480f      	ldr	r0, [pc, #60]	; (800600c <FillBuffer+0x68>)
 8005fce:	f7fa fe11 	bl	8000bf4 <HAL_DMA2D_Init>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d115      	bne.n	8006004 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8005fd8:	68f9      	ldr	r1, [r7, #12]
 8005fda:	480c      	ldr	r0, [pc, #48]	; (800600c <FillBuffer+0x68>)
 8005fdc:	f7fa ff68 	bl	8000eb0 <HAL_DMA2D_ConfigLayer>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10e      	bne.n	8006004 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	69f9      	ldr	r1, [r7, #28]
 8005ff0:	4806      	ldr	r0, [pc, #24]	; (800600c <FillBuffer+0x68>)
 8005ff2:	f7fa fe48 	bl	8000c86 <HAL_DMA2D_Start>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d103      	bne.n	8006004 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8005ffc:	210a      	movs	r1, #10
 8005ffe:	4803      	ldr	r0, [pc, #12]	; (800600c <FillBuffer+0x68>)
 8006000:	f7fa fe6c 	bl	8000cdc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8006004:	bf00      	nop
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20000e9c 	.word	0x20000e9c
 8006010:	4002b000 	.word	0x4002b000

08006014 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006018:	4b29      	ldr	r3, [pc, #164]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 800601a:	4a2a      	ldr	r2, [pc, #168]	; (80060c4 <BSP_SDRAM_Init+0xb0>)
 800601c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800601e:	4b2a      	ldr	r3, [pc, #168]	; (80060c8 <BSP_SDRAM_Init+0xb4>)
 8006020:	2202      	movs	r2, #2
 8006022:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8006024:	4b28      	ldr	r3, [pc, #160]	; (80060c8 <BSP_SDRAM_Init+0xb4>)
 8006026:	2207      	movs	r2, #7
 8006028:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800602a:	4b27      	ldr	r3, [pc, #156]	; (80060c8 <BSP_SDRAM_Init+0xb4>)
 800602c:	2204      	movs	r2, #4
 800602e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8006030:	4b25      	ldr	r3, [pc, #148]	; (80060c8 <BSP_SDRAM_Init+0xb4>)
 8006032:	2207      	movs	r2, #7
 8006034:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8006036:	4b24      	ldr	r3, [pc, #144]	; (80060c8 <BSP_SDRAM_Init+0xb4>)
 8006038:	2202      	movs	r2, #2
 800603a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800603c:	4b22      	ldr	r3, [pc, #136]	; (80060c8 <BSP_SDRAM_Init+0xb4>)
 800603e:	2202      	movs	r2, #2
 8006040:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8006042:	4b21      	ldr	r3, [pc, #132]	; (80060c8 <BSP_SDRAM_Init+0xb4>)
 8006044:	2202      	movs	r2, #2
 8006046:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8006048:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 800604a:	2201      	movs	r2, #1
 800604c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800604e:	4b1c      	ldr	r3, [pc, #112]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 8006050:	2200      	movs	r2, #0
 8006052:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006054:	4b1a      	ldr	r3, [pc, #104]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 8006056:	2204      	movs	r2, #4
 8006058:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800605a:	4b19      	ldr	r3, [pc, #100]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 800605c:	2210      	movs	r2, #16
 800605e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006060:	4b17      	ldr	r3, [pc, #92]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 8006062:	2240      	movs	r2, #64	; 0x40
 8006064:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8006066:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 8006068:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800606c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800606e:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 8006070:	2200      	movs	r2, #0
 8006072:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006074:	4b12      	ldr	r3, [pc, #72]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 8006076:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800607a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800607c:	4b10      	ldr	r3, [pc, #64]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 800607e:	2200      	movs	r2, #0
 8006080:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8006082:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 8006084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006088:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800608a:	2100      	movs	r1, #0
 800608c:	480c      	ldr	r0, [pc, #48]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 800608e:	f000 f87f 	bl	8006190 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8006092:	490d      	ldr	r1, [pc, #52]	; (80060c8 <BSP_SDRAM_Init+0xb4>)
 8006094:	480a      	ldr	r0, [pc, #40]	; (80060c0 <BSP_SDRAM_Init+0xac>)
 8006096:	f7fc fe18 	bl	8002cca <HAL_SDRAM_Init>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <BSP_SDRAM_Init+0xb8>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	e002      	b.n	80060ae <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80060a8:	4b08      	ldr	r3, [pc, #32]	; (80060cc <BSP_SDRAM_Init+0xb8>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80060ae:	f240 506a 	movw	r0, #1386	; 0x56a
 80060b2:	f000 f80d 	bl	80060d0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80060b6:	4b05      	ldr	r3, [pc, #20]	; (80060cc <BSP_SDRAM_Init+0xb8>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000f28 	.word	0x20000f28
 80060c4:	a0000140 	.word	0xa0000140
 80060c8:	20000f5c 	.word	0x20000f5c
 80060cc:	2000020c 	.word	0x2000020c

080060d0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80060dc:	4b2a      	ldr	r3, [pc, #168]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80060e2:	4b29      	ldr	r3, [pc, #164]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80060e4:	2208      	movs	r2, #8
 80060e6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80060e8:	4b27      	ldr	r3, [pc, #156]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80060ee:	4b26      	ldr	r3, [pc, #152]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80060f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060f8:	4923      	ldr	r1, [pc, #140]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80060fa:	4824      	ldr	r0, [pc, #144]	; (800618c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80060fc:	f7fc fe19 	bl	8002d32 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006100:	2001      	movs	r0, #1
 8006102:	f7fa fa65 	bl	80005d0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8006106:	4b20      	ldr	r3, [pc, #128]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006108:	2202      	movs	r2, #2
 800610a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800610c:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800610e:	2208      	movs	r2, #8
 8006110:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8006112:	4b1d      	ldr	r3, [pc, #116]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006114:	2201      	movs	r2, #1
 8006116:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800611a:	2200      	movs	r2, #0
 800611c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800611e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006122:	4919      	ldr	r1, [pc, #100]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006124:	4819      	ldr	r0, [pc, #100]	; (800618c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006126:	f7fc fe04 	bl	8002d32 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800612a:	4b17      	ldr	r3, [pc, #92]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800612c:	2203      	movs	r2, #3
 800612e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8006130:	4b15      	ldr	r3, [pc, #84]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006132:	2208      	movs	r2, #8
 8006134:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006138:	2204      	movs	r2, #4
 800613a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800613c:	4b12      	ldr	r3, [pc, #72]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800613e:	2200      	movs	r2, #0
 8006140:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8006142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006146:	4910      	ldr	r1, [pc, #64]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006148:	4810      	ldr	r0, [pc, #64]	; (800618c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800614a:	f7fc fdf2 	bl	8002d32 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800614e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8006152:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006156:	2204      	movs	r2, #4
 8006158:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800615c:	2208      	movs	r2, #8
 800615e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006162:	2201      	movs	r2, #1
 8006164:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a07      	ldr	r2, [pc, #28]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800616a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800616c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006170:	4905      	ldr	r1, [pc, #20]	; (8006188 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006172:	4806      	ldr	r0, [pc, #24]	; (800618c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006174:	f7fc fddd 	bl	8002d32 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4804      	ldr	r0, [pc, #16]	; (800618c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800617c:	f7fc fe04 	bl	8002d88 <HAL_SDRAM_ProgramRefreshRate>
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000f78 	.word	0x20000f78
 800618c:	20000f28 	.word	0x20000f28

08006190 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b090      	sub	sp, #64	; 0x40
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 80ec 	beq.w	800637a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80061a2:	2300      	movs	r3, #0
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061a6:	4b77      	ldr	r3, [pc, #476]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	4a76      	ldr	r2, [pc, #472]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	6393      	str	r3, [r2, #56]	; 0x38
 80061b2:	4b74      	ldr	r3, [pc, #464]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
 80061c2:	4b70      	ldr	r3, [pc, #448]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	4a6f      	ldr	r2, [pc, #444]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 80061c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80061cc:	6313      	str	r3, [r2, #48]	; 0x30
 80061ce:	4b6d      	ldr	r3, [pc, #436]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	623b      	str	r3, [r7, #32]
 80061de:	4b69      	ldr	r3, [pc, #420]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	4a68      	ldr	r2, [pc, #416]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 80061e4:	f043 0302 	orr.w	r3, r3, #2
 80061e8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ea:	4b66      	ldr	r3, [pc, #408]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	623b      	str	r3, [r7, #32]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	61fb      	str	r3, [r7, #28]
 80061fa:	4b62      	ldr	r3, [pc, #392]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4a61      	ldr	r2, [pc, #388]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006200:	f043 0304 	orr.w	r3, r3, #4
 8006204:	6313      	str	r3, [r2, #48]	; 0x30
 8006206:	4b5f      	ldr	r3, [pc, #380]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006212:	2300      	movs	r3, #0
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	4b5b      	ldr	r3, [pc, #364]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	4a5a      	ldr	r2, [pc, #360]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 800621c:	f043 0308 	orr.w	r3, r3, #8
 8006220:	6313      	str	r3, [r2, #48]	; 0x30
 8006222:	4b58      	ldr	r3, [pc, #352]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	61bb      	str	r3, [r7, #24]
 800622c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	4b54      	ldr	r3, [pc, #336]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	4a53      	ldr	r2, [pc, #332]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006238:	f043 0310 	orr.w	r3, r3, #16
 800623c:	6313      	str	r3, [r2, #48]	; 0x30
 800623e:	4b51      	ldr	r3, [pc, #324]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	4b4d      	ldr	r3, [pc, #308]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	4a4c      	ldr	r2, [pc, #304]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006254:	f043 0320 	orr.w	r3, r3, #32
 8006258:	6313      	str	r3, [r2, #48]	; 0x30
 800625a:	4b4a      	ldr	r3, [pc, #296]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	4b46      	ldr	r3, [pc, #280]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	4a45      	ldr	r2, [pc, #276]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006274:	6313      	str	r3, [r2, #48]	; 0x30
 8006276:	4b43      	ldr	r3, [pc, #268]	; (8006384 <BSP_SDRAM_MspInit+0x1f4>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8006282:	2302      	movs	r3, #2
 8006284:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8006286:	2302      	movs	r3, #2
 8006288:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800628a:	2300      	movs	r3, #0
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800628e:	230c      	movs	r3, #12
 8006290:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8006292:	2360      	movs	r3, #96	; 0x60
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8006296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800629a:	4619      	mov	r1, r3
 800629c:	483a      	ldr	r0, [pc, #232]	; (8006388 <BSP_SDRAM_MspInit+0x1f8>)
 800629e:	f7fa ff35 	bl	800110c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80062a2:	2301      	movs	r3, #1
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80062a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062aa:	4619      	mov	r1, r3
 80062ac:	4837      	ldr	r0, [pc, #220]	; (800638c <BSP_SDRAM_MspInit+0x1fc>)
 80062ae:	f7fa ff2d 	bl	800110c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80062b2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80062b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062bc:	4619      	mov	r1, r3
 80062be:	4834      	ldr	r0, [pc, #208]	; (8006390 <BSP_SDRAM_MspInit+0x200>)
 80062c0:	f7fa ff24 	bl	800110c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80062c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80062ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062ce:	4619      	mov	r1, r3
 80062d0:	4830      	ldr	r0, [pc, #192]	; (8006394 <BSP_SDRAM_MspInit+0x204>)
 80062d2:	f7fa ff1b 	bl	800110c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80062d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80062dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062e0:	4619      	mov	r1, r3
 80062e2:	482d      	ldr	r0, [pc, #180]	; (8006398 <BSP_SDRAM_MspInit+0x208>)
 80062e4:	f7fa ff12 	bl	800110c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80062e8:	f248 1333 	movw	r3, #33075	; 0x8133
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80062ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062f2:	4619      	mov	r1, r3
 80062f4:	4829      	ldr	r0, [pc, #164]	; (800639c <BSP_SDRAM_MspInit+0x20c>)
 80062f6:	f7fa ff09 	bl	800110c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80062fa:	4b29      	ldr	r3, [pc, #164]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006300:	4b27      	ldr	r3, [pc, #156]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006302:	2280      	movs	r2, #128	; 0x80
 8006304:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006306:	4b26      	ldr	r3, [pc, #152]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800630c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800630e:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006314:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006316:	4b22      	ldr	r3, [pc, #136]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800631c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800631e:	4b20      	ldr	r3, [pc, #128]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006320:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006324:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8006326:	4b1e      	ldr	r3, [pc, #120]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006328:	2200      	movs	r2, #0
 800632a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800632c:	4b1c      	ldr	r3, [pc, #112]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 800632e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006332:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006334:	4b1a      	ldr	r3, [pc, #104]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006336:	2200      	movs	r2, #0
 8006338:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800633a:	4b19      	ldr	r3, [pc, #100]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 800633c:	2203      	movs	r2, #3
 800633e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006340:	4b17      	ldr	r3, [pc, #92]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006342:	2200      	movs	r2, #0
 8006344:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8006346:	4b16      	ldr	r3, [pc, #88]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006348:	2200      	movs	r2, #0
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800634c:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 800634e:	4a15      	ldr	r2, [pc, #84]	; (80063a4 <BSP_SDRAM_MspInit+0x214>)
 8006350:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a12      	ldr	r2, [pc, #72]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
 8006358:	4a11      	ldr	r2, [pc, #68]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800635e:	4810      	ldr	r0, [pc, #64]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006360:	f7fa fb18 	bl	8000994 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8006364:	480e      	ldr	r0, [pc, #56]	; (80063a0 <BSP_SDRAM_MspInit+0x210>)
 8006366:	f7fa fa67 	bl	8000838 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800636a:	2200      	movs	r2, #0
 800636c:	210f      	movs	r1, #15
 800636e:	2038      	movs	r0, #56	; 0x38
 8006370:	f7fa fa2b 	bl	80007ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006374:	2038      	movs	r0, #56	; 0x38
 8006376:	f7fa fa44 	bl	8000802 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800637a:	bf00      	nop
 800637c:	3740      	adds	r7, #64	; 0x40
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40023800 	.word	0x40023800
 8006388:	40020400 	.word	0x40020400
 800638c:	40020800 	.word	0x40020800
 8006390:	40020c00 	.word	0x40020c00
 8006394:	40021000 	.word	0x40021000
 8006398:	40021400 	.word	0x40021400
 800639c:	40021800 	.word	0x40021800
 80063a0:	20000f88 	.word	0x20000f88
 80063a4:	40026410 	.word	0x40026410

080063a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ae:	2300      	movs	r3, #0
 80063b0:	607b      	str	r3, [r7, #4]
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <HAL_MspInit+0x4c>)
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	4a0f      	ldr	r2, [pc, #60]	; (80063f4 <HAL_MspInit+0x4c>)
 80063b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063bc:	6453      	str	r3, [r2, #68]	; 0x44
 80063be:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <HAL_MspInit+0x4c>)
 80063c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ca:	2300      	movs	r3, #0
 80063cc:	603b      	str	r3, [r7, #0]
 80063ce:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <HAL_MspInit+0x4c>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <HAL_MspInit+0x4c>)
 80063d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d8:	6413      	str	r3, [r2, #64]	; 0x40
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <HAL_MspInit+0x4c>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40023800 	.word	0x40023800

080063f8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a0b      	ldr	r2, [pc, #44]	; (8006434 <HAL_DMA2D_MspInit+0x3c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d10d      	bne.n	8006426 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <HAL_DMA2D_MspInit+0x40>)
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	4a09      	ldr	r2, [pc, #36]	; (8006438 <HAL_DMA2D_MspInit+0x40>)
 8006414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006418:	6313      	str	r3, [r2, #48]	; 0x30
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <HAL_DMA2D_MspInit+0x40>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	4002b000 	.word	0x4002b000
 8006438:	40023800 	.word	0x40023800

0800643c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08a      	sub	sp, #40	; 0x28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006444:	f107 0314 	add.w	r3, r7, #20
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	605a      	str	r2, [r3, #4]
 800644e:	609a      	str	r2, [r3, #8]
 8006450:	60da      	str	r2, [r3, #12]
 8006452:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a29      	ldr	r2, [pc, #164]	; (8006500 <HAL_I2C_MspInit+0xc4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d14b      	bne.n	80064f6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	4b28      	ldr	r3, [pc, #160]	; (8006504 <HAL_I2C_MspInit+0xc8>)
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	4a27      	ldr	r2, [pc, #156]	; (8006504 <HAL_I2C_MspInit+0xc8>)
 8006468:	f043 0304 	orr.w	r3, r3, #4
 800646c:	6313      	str	r3, [r2, #48]	; 0x30
 800646e:	4b25      	ldr	r3, [pc, #148]	; (8006504 <HAL_I2C_MspInit+0xc8>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	4b21      	ldr	r3, [pc, #132]	; (8006504 <HAL_I2C_MspInit+0xc8>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	4a20      	ldr	r2, [pc, #128]	; (8006504 <HAL_I2C_MspInit+0xc8>)
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	6313      	str	r3, [r2, #48]	; 0x30
 800648a:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <HAL_I2C_MspInit+0xc8>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800649a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800649c:	2312      	movs	r3, #18
 800649e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064a0:	2301      	movs	r3, #1
 80064a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a4:	2303      	movs	r3, #3
 80064a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80064a8:	2304      	movs	r3, #4
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064ac:	f107 0314 	add.w	r3, r7, #20
 80064b0:	4619      	mov	r1, r3
 80064b2:	4815      	ldr	r0, [pc, #84]	; (8006508 <HAL_I2C_MspInit+0xcc>)
 80064b4:	f7fa fe2a 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80064b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064be:	2312      	movs	r3, #18
 80064c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064c6:	2303      	movs	r3, #3
 80064c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80064ca:	2304      	movs	r3, #4
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ce:	f107 0314 	add.w	r3, r7, #20
 80064d2:	4619      	mov	r1, r3
 80064d4:	480d      	ldr	r0, [pc, #52]	; (800650c <HAL_I2C_MspInit+0xd0>)
 80064d6:	f7fa fe19 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80064da:	2300      	movs	r3, #0
 80064dc:	60bb      	str	r3, [r7, #8]
 80064de:	4b09      	ldr	r3, [pc, #36]	; (8006504 <HAL_I2C_MspInit+0xc8>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	4a08      	ldr	r2, [pc, #32]	; (8006504 <HAL_I2C_MspInit+0xc8>)
 80064e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064e8:	6413      	str	r3, [r2, #64]	; 0x40
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <HAL_I2C_MspInit+0xc8>)
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80064f6:	bf00      	nop
 80064f8:	3728      	adds	r7, #40	; 0x28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40005c00 	.word	0x40005c00
 8006504:	40023800 	.word	0x40023800
 8006508:	40020800 	.word	0x40020800
 800650c:	40020000 	.word	0x40020000

08006510 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08e      	sub	sp, #56	; 0x38
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	609a      	str	r2, [r3, #8]
 8006524:	60da      	str	r2, [r3, #12]
 8006526:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a77      	ldr	r2, [pc, #476]	; (800670c <HAL_LTDC_MspInit+0x1fc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	f040 80e8 	bne.w	8006704 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006534:	2300      	movs	r3, #0
 8006536:	623b      	str	r3, [r7, #32]
 8006538:	4b75      	ldr	r3, [pc, #468]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 800653a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653c:	4a74      	ldr	r2, [pc, #464]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 800653e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006542:	6453      	str	r3, [r2, #68]	; 0x44
 8006544:	4b72      	ldr	r3, [pc, #456]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 8006546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800654c:	623b      	str	r3, [r7, #32]
 800654e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006550:	2300      	movs	r3, #0
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	4b6e      	ldr	r3, [pc, #440]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	4a6d      	ldr	r2, [pc, #436]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 800655a:	f043 0320 	orr.w	r3, r3, #32
 800655e:	6313      	str	r3, [r2, #48]	; 0x30
 8006560:	4b6b      	ldr	r3, [pc, #428]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	4b67      	ldr	r3, [pc, #412]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	4a66      	ldr	r2, [pc, #408]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	6313      	str	r3, [r2, #48]	; 0x30
 800657c:	4b64      	ldr	r3, [pc, #400]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	4b60      	ldr	r3, [pc, #384]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	4a5f      	ldr	r2, [pc, #380]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 8006592:	f043 0302 	orr.w	r3, r3, #2
 8006596:	6313      	str	r3, [r2, #48]	; 0x30
 8006598:	4b5d      	ldr	r3, [pc, #372]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80065a4:	2300      	movs	r3, #0
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	4b59      	ldr	r3, [pc, #356]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	4a58      	ldr	r2, [pc, #352]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 80065ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b2:	6313      	str	r3, [r2, #48]	; 0x30
 80065b4:	4b56      	ldr	r3, [pc, #344]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	4b52      	ldr	r3, [pc, #328]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	4a51      	ldr	r2, [pc, #324]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 80065ca:	f043 0304 	orr.w	r3, r3, #4
 80065ce:	6313      	str	r3, [r2, #48]	; 0x30
 80065d0:	4b4f      	ldr	r3, [pc, #316]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065dc:	2300      	movs	r3, #0
 80065de:	60bb      	str	r3, [r7, #8]
 80065e0:	4b4b      	ldr	r3, [pc, #300]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	4a4a      	ldr	r2, [pc, #296]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 80065e6:	f043 0308 	orr.w	r3, r3, #8
 80065ea:	6313      	str	r3, [r2, #48]	; 0x30
 80065ec:	4b48      	ldr	r3, [pc, #288]	; (8006710 <HAL_LTDC_MspInit+0x200>)
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	60bb      	str	r3, [r7, #8]
 80065f6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80065f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065fe:	2302      	movs	r3, #2
 8006600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006602:	2300      	movs	r3, #0
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006606:	2300      	movs	r3, #0
 8006608:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800660a:	230e      	movs	r3, #14
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800660e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006612:	4619      	mov	r1, r3
 8006614:	483f      	ldr	r0, [pc, #252]	; (8006714 <HAL_LTDC_MspInit+0x204>)
 8006616:	f7fa fd79 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 800661a:	f641 0358 	movw	r3, #6232	; 0x1858
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006620:	2302      	movs	r3, #2
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006624:	2300      	movs	r3, #0
 8006626:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006628:	2300      	movs	r3, #0
 800662a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800662c:	230e      	movs	r3, #14
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006634:	4619      	mov	r1, r3
 8006636:	4838      	ldr	r0, [pc, #224]	; (8006718 <HAL_LTDC_MspInit+0x208>)
 8006638:	f7fa fd68 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800663c:	2303      	movs	r3, #3
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006640:	2302      	movs	r3, #2
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006644:	2300      	movs	r3, #0
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006648:	2300      	movs	r3, #0
 800664a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800664c:	2309      	movs	r3, #9
 800664e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006654:	4619      	mov	r1, r3
 8006656:	4831      	ldr	r0, [pc, #196]	; (800671c <HAL_LTDC_MspInit+0x20c>)
 8006658:	f7fa fd58 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800665c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006662:	2302      	movs	r3, #2
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006666:	2300      	movs	r3, #0
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800666a:	2300      	movs	r3, #0
 800666c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800666e:	230e      	movs	r3, #14
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006676:	4619      	mov	r1, r3
 8006678:	4828      	ldr	r0, [pc, #160]	; (800671c <HAL_LTDC_MspInit+0x20c>)
 800667a:	f7fa fd47 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 800667e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006684:	2302      	movs	r3, #2
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006688:	2300      	movs	r3, #0
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800668c:	2300      	movs	r3, #0
 800668e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006690:	230e      	movs	r3, #14
 8006692:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006698:	4619      	mov	r1, r3
 800669a:	4821      	ldr	r0, [pc, #132]	; (8006720 <HAL_LTDC_MspInit+0x210>)
 800669c:	f7fa fd36 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80066a0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a6:	2302      	movs	r3, #2
 80066a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ae:	2300      	movs	r3, #0
 80066b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80066b2:	230e      	movs	r3, #14
 80066b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ba:	4619      	mov	r1, r3
 80066bc:	4819      	ldr	r0, [pc, #100]	; (8006724 <HAL_LTDC_MspInit+0x214>)
 80066be:	f7fa fd25 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80066c2:	2348      	movs	r3, #72	; 0x48
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066c6:	2302      	movs	r3, #2
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ce:	2300      	movs	r3, #0
 80066d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80066d2:	230e      	movs	r3, #14
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066da:	4619      	mov	r1, r3
 80066dc:	4812      	ldr	r0, [pc, #72]	; (8006728 <HAL_LTDC_MspInit+0x218>)
 80066de:	f7fa fd15 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80066e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066e8:	2302      	movs	r3, #2
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066f0:	2300      	movs	r3, #0
 80066f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80066f4:	2309      	movs	r3, #9
 80066f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80066f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066fc:	4619      	mov	r1, r3
 80066fe:	4808      	ldr	r0, [pc, #32]	; (8006720 <HAL_LTDC_MspInit+0x210>)
 8006700:	f7fa fd04 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006704:	bf00      	nop
 8006706:	3738      	adds	r7, #56	; 0x38
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40016800 	.word	0x40016800
 8006710:	40023800 	.word	0x40023800
 8006714:	40021400 	.word	0x40021400
 8006718:	40020000 	.word	0x40020000
 800671c:	40020400 	.word	0x40020400
 8006720:	40021800 	.word	0x40021800
 8006724:	40020800 	.word	0x40020800
 8006728:	40020c00 	.word	0x40020c00

0800672c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a0b      	ldr	r2, [pc, #44]	; (8006768 <HAL_RNG_MspInit+0x3c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d10d      	bne.n	800675a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	4b0a      	ldr	r3, [pc, #40]	; (800676c <HAL_RNG_MspInit+0x40>)
 8006744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006746:	4a09      	ldr	r2, [pc, #36]	; (800676c <HAL_RNG_MspInit+0x40>)
 8006748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674c:	6353      	str	r3, [r2, #52]	; 0x34
 800674e:	4b07      	ldr	r3, [pc, #28]	; (800676c <HAL_RNG_MspInit+0x40>)
 8006750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	50060800 	.word	0x50060800
 800676c:	40023800 	.word	0x40023800

08006770 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08a      	sub	sp, #40	; 0x28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006778:	f107 0314 	add.w	r3, r7, #20
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	605a      	str	r2, [r3, #4]
 8006782:	609a      	str	r2, [r3, #8]
 8006784:	60da      	str	r2, [r3, #12]
 8006786:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a19      	ldr	r2, [pc, #100]	; (80067f4 <HAL_SPI_MspInit+0x84>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d12c      	bne.n	80067ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	4b18      	ldr	r3, [pc, #96]	; (80067f8 <HAL_SPI_MspInit+0x88>)
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <HAL_SPI_MspInit+0x88>)
 800679c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067a0:	6453      	str	r3, [r2, #68]	; 0x44
 80067a2:	4b15      	ldr	r3, [pc, #84]	; (80067f8 <HAL_SPI_MspInit+0x88>)
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <HAL_SPI_MspInit+0x88>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <HAL_SPI_MspInit+0x88>)
 80067b8:	f043 0320 	orr.w	r3, r3, #32
 80067bc:	6313      	str	r3, [r2, #48]	; 0x30
 80067be:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <HAL_SPI_MspInit+0x88>)
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80067ca:	f44f 7360 	mov.w	r3, #896	; 0x380
 80067ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d0:	2302      	movs	r3, #2
 80067d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067d8:	2303      	movs	r3, #3
 80067da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80067dc:	2305      	movs	r3, #5
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80067e0:	f107 0314 	add.w	r3, r7, #20
 80067e4:	4619      	mov	r1, r3
 80067e6:	4805      	ldr	r0, [pc, #20]	; (80067fc <HAL_SPI_MspInit+0x8c>)
 80067e8:	f7fa fc90 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80067ec:	bf00      	nop
 80067ee:	3728      	adds	r7, #40	; 0x28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40015000 	.word	0x40015000
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40021400 	.word	0x40021400

08006800 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a08      	ldr	r2, [pc, #32]	; (8006830 <HAL_SPI_MspDeInit+0x30>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d10a      	bne.n	8006828 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8006812:	4b08      	ldr	r3, [pc, #32]	; (8006834 <HAL_SPI_MspDeInit+0x34>)
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	4a07      	ldr	r2, [pc, #28]	; (8006834 <HAL_SPI_MspDeInit+0x34>)
 8006818:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800681c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800681e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8006822:	4805      	ldr	r0, [pc, #20]	; (8006838 <HAL_SPI_MspDeInit+0x38>)
 8006824:	f7fa fe1c 	bl	8001460 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40015000 	.word	0x40015000
 8006834:	40023800 	.word	0x40023800
 8006838:	40021400 	.word	0x40021400

0800683c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	; 0x28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006844:	f107 0314 	add.w	r3, r7, #20
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	605a      	str	r2, [r3, #4]
 800684e:	609a      	str	r2, [r3, #8]
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <HAL_UART_MspInit+0x94>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d134      	bne.n	80068c8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	4b1c      	ldr	r3, [pc, #112]	; (80068d4 <HAL_UART_MspInit+0x98>)
 8006864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006866:	4a1b      	ldr	r2, [pc, #108]	; (80068d4 <HAL_UART_MspInit+0x98>)
 8006868:	f043 0310 	orr.w	r3, r3, #16
 800686c:	6453      	str	r3, [r2, #68]	; 0x44
 800686e:	4b19      	ldr	r3, [pc, #100]	; (80068d4 <HAL_UART_MspInit+0x98>)
 8006870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006872:	f003 0310 	and.w	r3, r3, #16
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <HAL_UART_MspInit+0x98>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	4a14      	ldr	r2, [pc, #80]	; (80068d4 <HAL_UART_MspInit+0x98>)
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	6313      	str	r3, [r2, #48]	; 0x30
 800688a:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <HAL_UART_MspInit+0x98>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006896:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800689a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800689c:	2302      	movs	r3, #2
 800689e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068a0:	2301      	movs	r3, #1
 80068a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068a4:	2303      	movs	r3, #3
 80068a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80068a8:	2307      	movs	r3, #7
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ac:	f107 0314 	add.w	r3, r7, #20
 80068b0:	4619      	mov	r1, r3
 80068b2:	4809      	ldr	r0, [pc, #36]	; (80068d8 <HAL_UART_MspInit+0x9c>)
 80068b4:	f7fa fc2a 	bl	800110c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80068b8:	2200      	movs	r2, #0
 80068ba:	2100      	movs	r1, #0
 80068bc:	2025      	movs	r0, #37	; 0x25
 80068be:	f7f9 ff84 	bl	80007ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80068c2:	2025      	movs	r0, #37	; 0x25
 80068c4:	f7f9 ff9d 	bl	8000802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80068c8:	bf00      	nop
 80068ca:	3728      	adds	r7, #40	; 0x28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40011000 	.word	0x40011000
 80068d4:	40023800 	.word	0x40023800
 80068d8:	40020000 	.word	0x40020000

080068dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80068e2:	1d3b      	adds	r3, r7, #4
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	605a      	str	r2, [r3, #4]
 80068ea:	609a      	str	r2, [r3, #8]
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80068f0:	4b3b      	ldr	r3, [pc, #236]	; (80069e0 <HAL_FMC_MspInit+0x104>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d16f      	bne.n	80069d8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80068f8:	4b39      	ldr	r3, [pc, #228]	; (80069e0 <HAL_FMC_MspInit+0x104>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80068fe:	2300      	movs	r3, #0
 8006900:	603b      	str	r3, [r7, #0]
 8006902:	4b38      	ldr	r3, [pc, #224]	; (80069e4 <HAL_FMC_MspInit+0x108>)
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	4a37      	ldr	r2, [pc, #220]	; (80069e4 <HAL_FMC_MspInit+0x108>)
 8006908:	f043 0301 	orr.w	r3, r3, #1
 800690c:	6393      	str	r3, [r2, #56]	; 0x38
 800690e:	4b35      	ldr	r3, [pc, #212]	; (80069e4 <HAL_FMC_MspInit+0x108>)
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800691a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800691e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006920:	2302      	movs	r3, #2
 8006922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006928:	2303      	movs	r3, #3
 800692a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800692c:	230c      	movs	r3, #12
 800692e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	4619      	mov	r1, r3
 8006934:	482c      	ldr	r0, [pc, #176]	; (80069e8 <HAL_FMC_MspInit+0x10c>)
 8006936:	f7fa fbe9 	bl	800110c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800693a:	2301      	movs	r3, #1
 800693c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693e:	2302      	movs	r3, #2
 8006940:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006946:	2303      	movs	r3, #3
 8006948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800694a:	230c      	movs	r3, #12
 800694c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800694e:	1d3b      	adds	r3, r7, #4
 8006950:	4619      	mov	r1, r3
 8006952:	4826      	ldr	r0, [pc, #152]	; (80069ec <HAL_FMC_MspInit+0x110>)
 8006954:	f7fa fbda 	bl	800110c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8 
 8006958:	f248 1331 	movw	r3, #33073	; 0x8131
 800695c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800695e:	2302      	movs	r3, #2
 8006960:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006966:	2303      	movs	r3, #3
 8006968:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800696a:	230c      	movs	r3, #12
 800696c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800696e:	1d3b      	adds	r3, r7, #4
 8006970:	4619      	mov	r1, r3
 8006972:	481f      	ldr	r0, [pc, #124]	; (80069f0 <HAL_FMC_MspInit+0x114>)
 8006974:	f7fa fbca 	bl	800110c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8006978:	f64f 7383 	movw	r3, #65411	; 0xff83
 800697c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800697e:	2302      	movs	r3, #2
 8006980:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006986:	2303      	movs	r3, #3
 8006988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800698a:	230c      	movs	r3, #12
 800698c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800698e:	1d3b      	adds	r3, r7, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4818      	ldr	r0, [pc, #96]	; (80069f4 <HAL_FMC_MspInit+0x118>)
 8006994:	f7fa fbba 	bl	800110c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8006998:	f24c 7303 	movw	r3, #50947	; 0xc703
 800699c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699e:	2302      	movs	r3, #2
 80069a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069a6:	2303      	movs	r3, #3
 80069a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80069aa:	230c      	movs	r3, #12
 80069ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069ae:	1d3b      	adds	r3, r7, #4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4811      	ldr	r0, [pc, #68]	; (80069f8 <HAL_FMC_MspInit+0x11c>)
 80069b4:	f7fa fbaa 	bl	800110c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80069b8:	2360      	movs	r3, #96	; 0x60
 80069ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069bc:	2302      	movs	r3, #2
 80069be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069c4:	2303      	movs	r3, #3
 80069c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80069c8:	230c      	movs	r3, #12
 80069ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069cc:	1d3b      	adds	r3, r7, #4
 80069ce:	4619      	mov	r1, r3
 80069d0:	480a      	ldr	r0, [pc, #40]	; (80069fc <HAL_FMC_MspInit+0x120>)
 80069d2:	f7fa fb9b 	bl	800110c <HAL_GPIO_Init>
 80069d6:	e000      	b.n	80069da <HAL_FMC_MspInit+0xfe>
    return;
 80069d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000fe8 	.word	0x20000fe8
 80069e4:	40023800 	.word	0x40023800
 80069e8:	40021400 	.word	0x40021400
 80069ec:	40020800 	.word	0x40020800
 80069f0:	40021800 	.word	0x40021800
 80069f4:	40021000 	.word	0x40021000
 80069f8:	40020c00 	.word	0x40020c00
 80069fc:	40020400 	.word	0x40020400

08006a00 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006a08:	f7ff ff68 	bl	80068dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006a18:	bf00      	nop
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a22:	b480      	push	{r7}
 8006a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a26:	e7fe      	b.n	8006a26 <HardFault_Handler+0x4>

08006a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a2c:	e7fe      	b.n	8006a2c <MemManage_Handler+0x4>

08006a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a32:	e7fe      	b.n	8006a32 <BusFault_Handler+0x4>

08006a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a38:	e7fe      	b.n	8006a38 <UsageFault_Handler+0x4>

08006a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a3e:	bf00      	nop
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a4c:	bf00      	nop
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a56:	b480      	push	{r7}
 8006a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a5a:	bf00      	nop
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a68:	f7f9 fd92 	bl	8000590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a6c:	bf00      	nop
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006a74:	4802      	ldr	r0, [pc, #8]	; (8006a80 <USART1_IRQHandler+0x10>)
 8006a76:	f7fc ffd3 	bl	8003a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006a7a:	bf00      	nop
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20001148 	.word	0x20001148

08006a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a88:	4b16      	ldr	r3, [pc, #88]	; (8006ae4 <SystemInit+0x60>)
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8e:	4a15      	ldr	r2, [pc, #84]	; (8006ae4 <SystemInit+0x60>)
 8006a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006a98:	4b13      	ldr	r3, [pc, #76]	; (8006ae8 <SystemInit+0x64>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a12      	ldr	r2, [pc, #72]	; (8006ae8 <SystemInit+0x64>)
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <SystemInit+0x64>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <SystemInit+0x64>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a0e      	ldr	r2, [pc, #56]	; (8006ae8 <SystemInit+0x64>)
 8006ab0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006aba:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <SystemInit+0x64>)
 8006abc:	4a0b      	ldr	r2, [pc, #44]	; (8006aec <SystemInit+0x68>)
 8006abe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006ac0:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <SystemInit+0x64>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <SystemInit+0x64>)
 8006ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <SystemInit+0x64>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006ad2:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <SystemInit+0x60>)
 8006ad4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ad8:	609a      	str	r2, [r3, #8]
#endif
}
 8006ada:	bf00      	nop
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	e000ed00 	.word	0xe000ed00
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	24003010 	.word	0x24003010

08006af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b28 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006af4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006af6:	e003      	b.n	8006b00 <LoopCopyDataInit>

08006af8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006afa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006afc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006afe:	3104      	adds	r1, #4

08006b00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b00:	480b      	ldr	r0, [pc, #44]	; (8006b30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006b02:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006b04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b08:	d3f6      	bcc.n	8006af8 <CopyDataInit>
  ldr  r2, =_sbss
 8006b0a:	4a0b      	ldr	r2, [pc, #44]	; (8006b38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006b0c:	e002      	b.n	8006b14 <LoopFillZerobss>

08006b0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b10:	f842 3b04 	str.w	r3, [r2], #4

08006b14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006b16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006b18:	d3f9      	bcc.n	8006b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006b1a:	f7ff ffb3 	bl	8006a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b1e:	f000 f811 	bl	8006b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b22:	f7fe fa9b 	bl	800505c <main>
  bx  lr    
 8006b26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006b28:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8006b2c:	0800869c 	.word	0x0800869c
  ldr  r0, =_sdata
 8006b30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006b34:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 8006b38:	20000214 	.word	0x20000214
  ldr  r3, = _ebss
 8006b3c:	200012bc 	.word	0x200012bc

08006b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b40:	e7fe      	b.n	8006b40 <ADC_IRQHandler>
	...

08006b44 <__libc_init_array>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4e0d      	ldr	r6, [pc, #52]	; (8006b7c <__libc_init_array+0x38>)
 8006b48:	4c0d      	ldr	r4, [pc, #52]	; (8006b80 <__libc_init_array+0x3c>)
 8006b4a:	1ba4      	subs	r4, r4, r6
 8006b4c:	10a4      	asrs	r4, r4, #2
 8006b4e:	2500      	movs	r5, #0
 8006b50:	42a5      	cmp	r5, r4
 8006b52:	d109      	bne.n	8006b68 <__libc_init_array+0x24>
 8006b54:	4e0b      	ldr	r6, [pc, #44]	; (8006b84 <__libc_init_array+0x40>)
 8006b56:	4c0c      	ldr	r4, [pc, #48]	; (8006b88 <__libc_init_array+0x44>)
 8006b58:	f000 f820 	bl	8006b9c <_init>
 8006b5c:	1ba4      	subs	r4, r4, r6
 8006b5e:	10a4      	asrs	r4, r4, #2
 8006b60:	2500      	movs	r5, #0
 8006b62:	42a5      	cmp	r5, r4
 8006b64:	d105      	bne.n	8006b72 <__libc_init_array+0x2e>
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b6c:	4798      	blx	r3
 8006b6e:	3501      	adds	r5, #1
 8006b70:	e7ee      	b.n	8006b50 <__libc_init_array+0xc>
 8006b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b76:	4798      	blx	r3
 8006b78:	3501      	adds	r5, #1
 8006b7a:	e7f2      	b.n	8006b62 <__libc_init_array+0x1e>
 8006b7c:	08008694 	.word	0x08008694
 8006b80:	08008694 	.word	0x08008694
 8006b84:	08008694 	.word	0x08008694
 8006b88:	08008698 	.word	0x08008698

08006b8c <memset>:
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <memset+0xa>
 8006b94:	4770      	bx	lr
 8006b96:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9a:	e7f9      	b.n	8006b90 <memset+0x4>

08006b9c <_init>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr

08006ba8 <_fini>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr
